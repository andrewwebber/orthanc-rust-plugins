/* automatically generated by rust-bindgen 0.63.0 */

#[doc = "< Internal error"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_InternalError: OrthancPluginErrorCode = -1;
#[doc = "< Success"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_Success: OrthancPluginErrorCode = 0;
#[doc = "< Error encountered within the plugin engine"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_Plugin: OrthancPluginErrorCode = 1;
#[doc = "< Not implemented yet"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NotImplemented: OrthancPluginErrorCode = 2;
#[doc = "< Parameter out of range"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_ParameterOutOfRange:
    OrthancPluginErrorCode = 3;
#[doc = "< The server hosting Orthanc is running out of memory"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NotEnoughMemory: OrthancPluginErrorCode = 4;
#[doc = "< Bad type for a parameter"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadParameterType: OrthancPluginErrorCode =
    5;
#[doc = "< Bad sequence of calls"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadSequenceOfCalls: OrthancPluginErrorCode =
    6;
#[doc = "< Accessing an inexistent item"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_InexistentItem: OrthancPluginErrorCode = 7;
#[doc = "< Bad request"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadRequest: OrthancPluginErrorCode = 8;
#[doc = "< Error in the network protocol"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NetworkProtocol: OrthancPluginErrorCode = 9;
#[doc = "< Error while calling a system command"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SystemCommand: OrthancPluginErrorCode = 10;
#[doc = "< Error with the database engine"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_Database: OrthancPluginErrorCode = 11;
#[doc = "< Badly formatted URI"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_UriSyntax: OrthancPluginErrorCode = 12;
#[doc = "< Inexistent file"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_InexistentFile: OrthancPluginErrorCode = 13;
#[doc = "< Cannot write to file"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CannotWriteFile: OrthancPluginErrorCode =
    14;
#[doc = "< Bad file format"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadFileFormat: OrthancPluginErrorCode = 15;
#[doc = "< Timeout"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_Timeout: OrthancPluginErrorCode = 16;
#[doc = "< Unknown resource"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_UnknownResource: OrthancPluginErrorCode =
    17;
#[doc = "< Incompatible version of the database"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_IncompatibleDatabaseVersion:
    OrthancPluginErrorCode = 18;
#[doc = "< The file storage is full"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_FullStorage: OrthancPluginErrorCode = 19;
#[doc = "< Corrupted file (e.g. inconsistent MD5 hash)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CorruptedFile: OrthancPluginErrorCode = 20;
#[doc = "< Inexistent tag"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_InexistentTag: OrthancPluginErrorCode = 21;
#[doc = "< Cannot modify a read-only data structure"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_ReadOnly: OrthancPluginErrorCode = 22;
#[doc = "< Incompatible format of the images"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_IncompatibleImageFormat:
    OrthancPluginErrorCode = 23;
#[doc = "< Incompatible size of the images"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_IncompatibleImageSize:
    OrthancPluginErrorCode = 24;
#[doc = "< Error while using a shared library (plugin)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SharedLibrary: OrthancPluginErrorCode = 25;
#[doc = "< Plugin invoking an unknown service"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_UnknownPluginService:
    OrthancPluginErrorCode = 26;
#[doc = "< Unknown DICOM tag"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_UnknownDicomTag: OrthancPluginErrorCode =
    27;
#[doc = "< Cannot parse a JSON document"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadJson: OrthancPluginErrorCode = 28;
#[doc = "< Bad credentials were provided to an HTTP request"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_Unauthorized: OrthancPluginErrorCode = 29;
#[doc = "< Badly formatted font file"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadFont: OrthancPluginErrorCode = 30;
#[doc = "< The plugin implementing a custom database back-end does not fulfill the proper interface"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DatabasePlugin: OrthancPluginErrorCode = 31;
#[doc = "< Error in the plugin implementing a custom storage area"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_StorageAreaPlugin: OrthancPluginErrorCode =
    32;
#[doc = "< The request is empty"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_EmptyRequest: OrthancPluginErrorCode = 33;
#[doc = "< Cannot send a response which is acceptable according to the Accept HTTP header"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NotAcceptable: OrthancPluginErrorCode = 34;
#[doc = "< Cannot handle a NULL pointer"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NullPointer: OrthancPluginErrorCode = 35;
#[doc = "< The database is currently not available (probably a transient situation)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DatabaseUnavailable:
    OrthancPluginErrorCode = 36;
#[doc = "< This job was canceled"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CanceledJob: OrthancPluginErrorCode = 37;
#[doc = "< Geometry error encountered in Stone"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadGeometry: OrthancPluginErrorCode = 38;
#[doc = "< Cannot initialize SSL encryption, check out your certificates"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SslInitialization: OrthancPluginErrorCode =
    39;
#[doc = "< Calling a function that has been removed from the Orthanc Framework"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DiscontinuedAbi: OrthancPluginErrorCode =
    40;
#[doc = "< Incorrect range request"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadRange: OrthancPluginErrorCode = 41;
#[doc = "< Database could not serialize access due to concurrent update, the transaction should be retried"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DatabaseCannotSerialize:
    OrthancPluginErrorCode = 42;
#[doc = "< A bad revision number was provided, which might indicate conflict between multiple writers"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_Revision: OrthancPluginErrorCode = 43;
#[doc = "< A main DICOM Tag has been defined multiple times for the same resource level"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_MainDicomTagsMultiplyDefined:
    OrthancPluginErrorCode = 44;
#[doc = "< SQLite: The database is not opened"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteNotOpened: OrthancPluginErrorCode =
    1000;
#[doc = "< SQLite: Connection is already open"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteAlreadyOpened:
    OrthancPluginErrorCode = 1001;
#[doc = "< SQLite: Unable to open the database"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteCannotOpen: OrthancPluginErrorCode =
    1002;
#[doc = "< SQLite: This cached statement is already being referred to"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteStatementAlreadyUsed:
    OrthancPluginErrorCode = 1003;
#[doc = "< SQLite: Cannot execute a command"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteExecute: OrthancPluginErrorCode =
    1004;
#[doc = "< SQLite: Rolling back a nonexistent transaction (have you called Begin()?)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteRollbackWithoutTransaction:
    OrthancPluginErrorCode = 1005;
#[doc = "< SQLite: Committing a nonexistent transaction"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteCommitWithoutTransaction:
    OrthancPluginErrorCode = 1006;
#[doc = "< SQLite: Unable to register a function"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteRegisterFunction:
    OrthancPluginErrorCode = 1007;
#[doc = "< SQLite: Unable to flush the database"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteFlush: OrthancPluginErrorCode = 1008;
#[doc = "< SQLite: Cannot run a cached statement"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteCannotRun: OrthancPluginErrorCode =
    1009;
#[doc = "< SQLite: Cannot step over a cached statement"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteCannotStep: OrthancPluginErrorCode =
    1010;
#[doc = "< SQLite: Bing a value while out of range (serious error)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteBindOutOfRange:
    OrthancPluginErrorCode = 1011;
#[doc = "< SQLite: Cannot prepare a cached statement"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLitePrepareStatement:
    OrthancPluginErrorCode = 1012;
#[doc = "< SQLite: Beginning the same transaction twice"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteTransactionAlreadyStarted:
    OrthancPluginErrorCode = 1013;
#[doc = "< SQLite: Failure when committing the transaction"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteTransactionCommit:
    OrthancPluginErrorCode = 1014;
#[doc = "< SQLite: Cannot start a transaction"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SQLiteTransactionBegin:
    OrthancPluginErrorCode = 1015;
#[doc = "< The directory to be created is already occupied by a regular file"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DirectoryOverFile: OrthancPluginErrorCode =
    2000;
#[doc = "< Unable to create a subdirectory or a file in the file storage"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_FileStorageCannotWrite:
    OrthancPluginErrorCode = 2001;
#[doc = "< The specified path does not point to a directory"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DirectoryExpected: OrthancPluginErrorCode =
    2002;
#[doc = "< The TCP port of the HTTP server is privileged or already in use"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_HttpPortInUse: OrthancPluginErrorCode =
    2003;
#[doc = "< The TCP port of the DICOM server is privileged or already in use"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DicomPortInUse: OrthancPluginErrorCode =
    2004;
#[doc = "< This HTTP status is not allowed in a REST API"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadHttpStatusInRest:
    OrthancPluginErrorCode = 2005;
#[doc = "< The specified path does not point to a regular file"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_RegularFileExpected:
    OrthancPluginErrorCode = 2006;
#[doc = "< Unable to get the path to the executable"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_PathToExecutable: OrthancPluginErrorCode =
    2007;
#[doc = "< Cannot create a directory"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_MakeDirectory: OrthancPluginErrorCode =
    2008;
#[doc = "< An application entity title (AET) cannot be empty or be longer than 16 characters"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadApplicationEntityTitle:
    OrthancPluginErrorCode = 2009;
#[doc = "< No request handler factory for DICOM C-FIND SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoCFindHandler: OrthancPluginErrorCode =
    2010;
#[doc = "< No request handler factory for DICOM C-MOVE SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoCMoveHandler: OrthancPluginErrorCode =
    2011;
#[doc = "< No request handler factory for DICOM C-STORE SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoCStoreHandler: OrthancPluginErrorCode =
    2012;
#[doc = "< No application entity filter"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoApplicationEntityFilter:
    OrthancPluginErrorCode = 2013;
#[doc = "< DicomUserConnection: Unable to find the SOP class and instance"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoSopClassOrInstance:
    OrthancPluginErrorCode = 2014;
#[doc = "< DicomUserConnection: No acceptable presentation context for modality"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoPresentationContext:
    OrthancPluginErrorCode = 2015;
#[doc = "< DicomUserConnection: The C-FIND command is not supported by the remote SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DicomFindUnavailable:
    OrthancPluginErrorCode = 2016;
#[doc = "< DicomUserConnection: The C-MOVE command is not supported by the remote SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DicomMoveUnavailable:
    OrthancPluginErrorCode = 2017;
#[doc = "< Cannot store an instance"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CannotStoreInstance:
    OrthancPluginErrorCode = 2018;
#[doc = "< Only string values are supported when creating DICOM instances"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomNotString:
    OrthancPluginErrorCode = 2019;
#[doc = "< Trying to override a value inherited from a parent module"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomOverrideTag:
    OrthancPluginErrorCode = 2020;
#[doc = "< Use \\\"Content\\\" to inject an image into a new DICOM instance"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomUseContent:
    OrthancPluginErrorCode = 2021;
#[doc = "< No payload is present for one instance in the series"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomNoPayload:
    OrthancPluginErrorCode = 2022;
#[doc = "< The payload of the DICOM instance must be specified according to Data URI scheme"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomUseDataUriScheme:
    OrthancPluginErrorCode = 2023;
#[doc = "< Trying to attach a new DICOM instance to an inexistent resource"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomBadParent:
    OrthancPluginErrorCode = 2024;
#[doc = "< Trying to attach a new DICOM instance to an instance (must be a series, study or patient)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomParentIsInstance:
    OrthancPluginErrorCode = 2025;
#[doc = "< Unable to get the encoding of the parent resource"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CreateDicomParentEncoding:
    OrthancPluginErrorCode = 2026;
#[doc = "< Unknown modality"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_UnknownModality: OrthancPluginErrorCode =
    2027;
#[doc = "< Bad ordering of filters in a job"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_BadJobOrdering: OrthancPluginErrorCode =
    2028;
#[doc = "< Cannot convert the given JSON object to a Lua table"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_JsonToLuaTable: OrthancPluginErrorCode =
    2029;
#[doc = "< Cannot create the Lua context"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CannotCreateLua: OrthancPluginErrorCode =
    2030;
#[doc = "< Cannot execute a Lua command"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CannotExecuteLua: OrthancPluginErrorCode =
    2031;
#[doc = "< Arguments cannot be pushed after the Lua function is executed"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_LuaAlreadyExecuted: OrthancPluginErrorCode =
    2032;
#[doc = "< The Lua function does not give the expected number of outputs"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_LuaBadOutput: OrthancPluginErrorCode = 2033;
#[doc = "< The Lua function is not a predicate (only true/false outputs allowed)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NotLuaPredicate: OrthancPluginErrorCode =
    2034;
#[doc = "< The Lua function does not return a string"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_LuaReturnsNoString: OrthancPluginErrorCode =
    2035;
#[doc = "< Another plugin has already registered a custom storage area"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_StorageAreaAlreadyRegistered:
    OrthancPluginErrorCode = 2036;
#[doc = "< Another plugin has already registered a custom database back-end"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DatabaseBackendAlreadyRegistered:
    OrthancPluginErrorCode = 2037;
#[doc = "< Plugin trying to call the database during its initialization"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_DatabaseNotInitialized:
    OrthancPluginErrorCode = 2038;
#[doc = "< Orthanc has been built without SSL support"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_SslDisabled: OrthancPluginErrorCode = 2039;
#[doc = "< Unable to order the slices of the series"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_CannotOrderSlices: OrthancPluginErrorCode =
    2040;
#[doc = "< No request handler factory for DICOM C-Find Modality SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoWorklistHandler: OrthancPluginErrorCode =
    2041;
#[doc = "< Cannot override the value of a tag that already exists"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_AlreadyExistingTag: OrthancPluginErrorCode =
    2042;
#[doc = "< No request handler factory for DICOM N-ACTION SCP (storage commitment)"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoStorageCommitmentHandler:
    OrthancPluginErrorCode = 2043;
#[doc = "< No request handler factory for DICOM C-GET SCP"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_NoCGetHandler: OrthancPluginErrorCode =
    2044;
#[doc = "< Unsupported media type"]
pub const OrthancPluginErrorCode_OrthancPluginErrorCode_UnsupportedMediaType:
    OrthancPluginErrorCode = 3000;
pub const OrthancPluginErrorCode__OrthancPluginErrorCode_INTERNAL: OrthancPluginErrorCode =
    2147483647;
#[doc = " The various error codes that can be returned by the Orthanc core."]
pub type OrthancPluginErrorCode = ::std::os::raw::c_int;
extern "C" {
    #[doc = " Forward declaration of one of the mandatory functions for Orthanc\n plugins."]
    pub fn OrthancPluginGetName() -> *const ::std::os::raw::c_char;
}
#[doc = "< GET request"]
pub const OrthancPluginHttpMethod_OrthancPluginHttpMethod_Get: OrthancPluginHttpMethod = 1;
#[doc = "< POST request"]
pub const OrthancPluginHttpMethod_OrthancPluginHttpMethod_Post: OrthancPluginHttpMethod = 2;
#[doc = "< PUT request"]
pub const OrthancPluginHttpMethod_OrthancPluginHttpMethod_Put: OrthancPluginHttpMethod = 3;
#[doc = "< DELETE request"]
pub const OrthancPluginHttpMethod_OrthancPluginHttpMethod_Delete: OrthancPluginHttpMethod = 4;
pub const OrthancPluginHttpMethod__OrthancPluginHttpMethod_INTERNAL: OrthancPluginHttpMethod =
    2147483647;
#[doc = " The various HTTP methods for a REST call."]
pub type OrthancPluginHttpMethod = ::std::os::raw::c_uint;
#[doc = " @brief The parameters of a REST request.\n @ingroup Callbacks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrthancPluginHttpRequest {
    #[doc = " @brief The HTTP method."]
    pub method: OrthancPluginHttpMethod,
    #[doc = " @brief The number of groups of the regular expression."]
    pub groupsCount: u32,
    #[doc = " @brief The matched values for the groups of the regular expression."]
    pub groups: *const *const ::std::os::raw::c_char,
    #[doc = " @brief For a GET request, the number of GET parameters."]
    pub getCount: u32,
    #[doc = " @brief For a GET request, the keys of the GET parameters."]
    pub getKeys: *const *const ::std::os::raw::c_char,
    #[doc = " @brief For a GET request, the values of the GET parameters."]
    pub getValues: *const *const ::std::os::raw::c_char,
    #[doc = " @brief For a PUT or POST request, the content of the body."]
    pub body: *const ::std::os::raw::c_void,
    #[doc = " @brief For a PUT or POST request, the number of bytes of the body."]
    pub bodySize: u32,
    #[doc = " @brief The number of HTTP headers."]
    pub headersCount: u32,
    #[doc = " @brief The keys of the HTTP headers (always converted to low-case)."]
    pub headersKeys: *const *const ::std::os::raw::c_char,
    #[doc = " @brief The values of the HTTP headers."]
    pub headersValues: *const *const ::std::os::raw::c_char,
}
pub const _OrthancPluginService__OrthancPluginService_LogInfo: _OrthancPluginService = 1;
pub const _OrthancPluginService__OrthancPluginService_LogWarning: _OrthancPluginService = 2;
pub const _OrthancPluginService__OrthancPluginService_LogError: _OrthancPluginService = 3;
pub const _OrthancPluginService__OrthancPluginService_GetOrthancPath: _OrthancPluginService = 4;
pub const _OrthancPluginService__OrthancPluginService_GetOrthancDirectory: _OrthancPluginService =
    5;
pub const _OrthancPluginService__OrthancPluginService_GetConfigurationPath: _OrthancPluginService =
    6;
pub const _OrthancPluginService__OrthancPluginService_SetPluginProperty: _OrthancPluginService = 7;
pub const _OrthancPluginService__OrthancPluginService_GetGlobalProperty: _OrthancPluginService = 8;
pub const _OrthancPluginService__OrthancPluginService_SetGlobalProperty: _OrthancPluginService = 9;
pub const _OrthancPluginService__OrthancPluginService_GetCommandLineArgumentsCount:
    _OrthancPluginService = 10;
pub const _OrthancPluginService__OrthancPluginService_GetCommandLineArgument:
    _OrthancPluginService = 11;
pub const _OrthancPluginService__OrthancPluginService_GetExpectedDatabaseVersion:
    _OrthancPluginService = 12;
pub const _OrthancPluginService__OrthancPluginService_GetConfiguration: _OrthancPluginService = 13;
pub const _OrthancPluginService__OrthancPluginService_BufferCompression: _OrthancPluginService = 14;
pub const _OrthancPluginService__OrthancPluginService_ReadFile: _OrthancPluginService = 15;
pub const _OrthancPluginService__OrthancPluginService_WriteFile: _OrthancPluginService = 16;
pub const _OrthancPluginService__OrthancPluginService_GetErrorDescription: _OrthancPluginService =
    17;
pub const _OrthancPluginService__OrthancPluginService_CallHttpClient: _OrthancPluginService = 18;
pub const _OrthancPluginService__OrthancPluginService_RegisterErrorCode: _OrthancPluginService = 19;
pub const _OrthancPluginService__OrthancPluginService_RegisterDictionaryTag: _OrthancPluginService =
    20;
pub const _OrthancPluginService__OrthancPluginService_DicomBufferToJson: _OrthancPluginService = 21;
pub const _OrthancPluginService__OrthancPluginService_DicomInstanceToJson: _OrthancPluginService =
    22;
pub const _OrthancPluginService__OrthancPluginService_CreateDicom: _OrthancPluginService = 23;
pub const _OrthancPluginService__OrthancPluginService_ComputeMd5: _OrthancPluginService = 24;
pub const _OrthancPluginService__OrthancPluginService_ComputeSha1: _OrthancPluginService = 25;
pub const _OrthancPluginService__OrthancPluginService_LookupDictionary: _OrthancPluginService = 26;
pub const _OrthancPluginService__OrthancPluginService_CallHttpClient2: _OrthancPluginService = 27;
pub const _OrthancPluginService__OrthancPluginService_GenerateUuid: _OrthancPluginService = 28;
pub const _OrthancPluginService__OrthancPluginService_RegisterPrivateDictionaryTag:
    _OrthancPluginService = 29;
pub const _OrthancPluginService__OrthancPluginService_AutodetectMimeType: _OrthancPluginService =
    30;
pub const _OrthancPluginService__OrthancPluginService_SetMetricsValue: _OrthancPluginService = 31;
pub const _OrthancPluginService__OrthancPluginService_EncodeDicomWebJson: _OrthancPluginService =
    32;
pub const _OrthancPluginService__OrthancPluginService_EncodeDicomWebXml: _OrthancPluginService = 33;
pub const _OrthancPluginService__OrthancPluginService_ChunkedHttpClient: _OrthancPluginService = 34;
pub const _OrthancPluginService__OrthancPluginService_GetTagName: _OrthancPluginService = 35;
pub const _OrthancPluginService__OrthancPluginService_EncodeDicomWebJson2: _OrthancPluginService =
    36;
pub const _OrthancPluginService__OrthancPluginService_EncodeDicomWebXml2: _OrthancPluginService =
    37;
pub const _OrthancPluginService__OrthancPluginService_CreateMemoryBuffer: _OrthancPluginService =
    38;
pub const _OrthancPluginService__OrthancPluginService_GenerateRestApiAuthorizationToken:
    _OrthancPluginService = 39;
pub const _OrthancPluginService__OrthancPluginService_CreateMemoryBuffer64: _OrthancPluginService =
    40;
pub const _OrthancPluginService__OrthancPluginService_CreateDicom2: _OrthancPluginService = 41;
pub const _OrthancPluginService__OrthancPluginService_RegisterRestCallback: _OrthancPluginService =
    1000;
pub const _OrthancPluginService__OrthancPluginService_RegisterOnStoredInstanceCallback:
    _OrthancPluginService = 1001;
pub const _OrthancPluginService__OrthancPluginService_RegisterStorageArea: _OrthancPluginService =
    1002;
pub const _OrthancPluginService__OrthancPluginService_RegisterOnChangeCallback:
    _OrthancPluginService = 1003;
pub const _OrthancPluginService__OrthancPluginService_RegisterRestCallbackNoLock:
    _OrthancPluginService = 1004;
pub const _OrthancPluginService__OrthancPluginService_RegisterWorklistCallback:
    _OrthancPluginService = 1005;
pub const _OrthancPluginService__OrthancPluginService_RegisterDecodeImageCallback:
    _OrthancPluginService = 1006;
pub const _OrthancPluginService__OrthancPluginService_RegisterIncomingHttpRequestFilter:
    _OrthancPluginService = 1007;
pub const _OrthancPluginService__OrthancPluginService_RegisterFindCallback: _OrthancPluginService =
    1008;
pub const _OrthancPluginService__OrthancPluginService_RegisterMoveCallback: _OrthancPluginService =
    1009;
pub const _OrthancPluginService__OrthancPluginService_RegisterIncomingHttpRequestFilter2:
    _OrthancPluginService = 1010;
pub const _OrthancPluginService__OrthancPluginService_RegisterRefreshMetricsCallback:
    _OrthancPluginService = 1011;
pub const _OrthancPluginService__OrthancPluginService_RegisterChunkedRestCallback:
    _OrthancPluginService = 1012;
pub const _OrthancPluginService__OrthancPluginService_RegisterStorageCommitmentScpCallback:
    _OrthancPluginService = 1013;
pub const _OrthancPluginService__OrthancPluginService_RegisterIncomingDicomInstanceFilter:
    _OrthancPluginService = 1014;
pub const _OrthancPluginService__OrthancPluginService_RegisterTranscoderCallback:
    _OrthancPluginService = 1015;
pub const _OrthancPluginService__OrthancPluginService_RegisterStorageArea2: _OrthancPluginService =
    1016;
pub const _OrthancPluginService__OrthancPluginService_RegisterIncomingCStoreInstanceFilter:
    _OrthancPluginService = 1017;
pub const _OrthancPluginService__OrthancPluginService_RegisterReceivedInstanceCallback:
    _OrthancPluginService = 1018;
pub const _OrthancPluginService__OrthancPluginService_RegisterWebDavCollection:
    _OrthancPluginService = 1019;
pub const _OrthancPluginService__OrthancPluginService_AnswerBuffer: _OrthancPluginService = 2000;
pub const _OrthancPluginService__OrthancPluginService_CompressAndAnswerPngImage:
    _OrthancPluginService = 2001;
pub const _OrthancPluginService__OrthancPluginService_Redirect: _OrthancPluginService = 2002;
pub const _OrthancPluginService__OrthancPluginService_SendHttpStatusCode: _OrthancPluginService =
    2003;
pub const _OrthancPluginService__OrthancPluginService_SendUnauthorized: _OrthancPluginService =
    2004;
pub const _OrthancPluginService__OrthancPluginService_SendMethodNotAllowed: _OrthancPluginService =
    2005;
pub const _OrthancPluginService__OrthancPluginService_SetCookie: _OrthancPluginService = 2006;
pub const _OrthancPluginService__OrthancPluginService_SetHttpHeader: _OrthancPluginService = 2007;
pub const _OrthancPluginService__OrthancPluginService_StartMultipartAnswer: _OrthancPluginService =
    2008;
pub const _OrthancPluginService__OrthancPluginService_SendMultipartItem: _OrthancPluginService =
    2009;
pub const _OrthancPluginService__OrthancPluginService_SendHttpStatus: _OrthancPluginService = 2010;
pub const _OrthancPluginService__OrthancPluginService_CompressAndAnswerImage:
    _OrthancPluginService = 2011;
pub const _OrthancPluginService__OrthancPluginService_SendMultipartItem2: _OrthancPluginService =
    2012;
pub const _OrthancPluginService__OrthancPluginService_SetHttpErrorDetails: _OrthancPluginService =
    2013;
pub const _OrthancPluginService__OrthancPluginService_GetDicomForInstance: _OrthancPluginService =
    3000;
pub const _OrthancPluginService__OrthancPluginService_RestApiGet: _OrthancPluginService = 3001;
pub const _OrthancPluginService__OrthancPluginService_RestApiPost: _OrthancPluginService = 3002;
pub const _OrthancPluginService__OrthancPluginService_RestApiDelete: _OrthancPluginService = 3003;
pub const _OrthancPluginService__OrthancPluginService_RestApiPut: _OrthancPluginService = 3004;
pub const _OrthancPluginService__OrthancPluginService_LookupPatient: _OrthancPluginService = 3005;
pub const _OrthancPluginService__OrthancPluginService_LookupStudy: _OrthancPluginService = 3006;
pub const _OrthancPluginService__OrthancPluginService_LookupSeries: _OrthancPluginService = 3007;
pub const _OrthancPluginService__OrthancPluginService_LookupInstance: _OrthancPluginService = 3008;
pub const _OrthancPluginService__OrthancPluginService_LookupStudyWithAccessionNumber:
    _OrthancPluginService = 3009;
pub const _OrthancPluginService__OrthancPluginService_RestApiGetAfterPlugins:
    _OrthancPluginService = 3010;
pub const _OrthancPluginService__OrthancPluginService_RestApiPostAfterPlugins:
    _OrthancPluginService = 3011;
pub const _OrthancPluginService__OrthancPluginService_RestApiDeleteAfterPlugins:
    _OrthancPluginService = 3012;
pub const _OrthancPluginService__OrthancPluginService_RestApiPutAfterPlugins:
    _OrthancPluginService = 3013;
pub const _OrthancPluginService__OrthancPluginService_ReconstructMainDicomTags:
    _OrthancPluginService = 3014;
pub const _OrthancPluginService__OrthancPluginService_RestApiGet2: _OrthancPluginService = 3015;
pub const _OrthancPluginService__OrthancPluginService_CallRestApi: _OrthancPluginService = 3016;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceRemoteAet: _OrthancPluginService =
    4000;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceSize: _OrthancPluginService = 4001;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceData: _OrthancPluginService = 4002;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceJson: _OrthancPluginService = 4003;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceSimplifiedJson:
    _OrthancPluginService = 4004;
pub const _OrthancPluginService__OrthancPluginService_HasInstanceMetadata: _OrthancPluginService =
    4005;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceMetadata: _OrthancPluginService =
    4006;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceOrigin: _OrthancPluginService =
    4007;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceTransferSyntaxUid:
    _OrthancPluginService = 4008;
pub const _OrthancPluginService__OrthancPluginService_HasInstancePixelData: _OrthancPluginService =
    4009;
pub const _OrthancPluginService__OrthancPluginService_CreateDicomInstance: _OrthancPluginService =
    4010;
pub const _OrthancPluginService__OrthancPluginService_FreeDicomInstance: _OrthancPluginService =
    4011;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceFramesCount:
    _OrthancPluginService = 4012;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceRawFrame: _OrthancPluginService =
    4013;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceDecodedFrame:
    _OrthancPluginService = 4014;
pub const _OrthancPluginService__OrthancPluginService_TranscodeDicomInstance:
    _OrthancPluginService = 4015;
pub const _OrthancPluginService__OrthancPluginService_SerializeDicomInstance:
    _OrthancPluginService = 4016;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceAdvancedJson:
    _OrthancPluginService = 4017;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceDicomWebJson:
    _OrthancPluginService = 4018;
pub const _OrthancPluginService__OrthancPluginService_GetInstanceDicomWebXml:
    _OrthancPluginService = 4019;
pub const _OrthancPluginService__OrthancPluginService_RegisterDatabaseBackend:
    _OrthancPluginService = 5000;
pub const _OrthancPluginService__OrthancPluginService_DatabaseAnswer: _OrthancPluginService = 5001;
pub const _OrthancPluginService__OrthancPluginService_RegisterDatabaseBackendV2:
    _OrthancPluginService = 5002;
pub const _OrthancPluginService__OrthancPluginService_StorageAreaCreate: _OrthancPluginService =
    5003;
pub const _OrthancPluginService__OrthancPluginService_StorageAreaRead: _OrthancPluginService = 5004;
pub const _OrthancPluginService__OrthancPluginService_StorageAreaRemove: _OrthancPluginService =
    5005;
pub const _OrthancPluginService__OrthancPluginService_RegisterDatabaseBackendV3:
    _OrthancPluginService = 5006;
pub const _OrthancPluginService__OrthancPluginService_GetImagePixelFormat: _OrthancPluginService =
    6000;
pub const _OrthancPluginService__OrthancPluginService_GetImageWidth: _OrthancPluginService = 6001;
pub const _OrthancPluginService__OrthancPluginService_GetImageHeight: _OrthancPluginService = 6002;
pub const _OrthancPluginService__OrthancPluginService_GetImagePitch: _OrthancPluginService = 6003;
pub const _OrthancPluginService__OrthancPluginService_GetImageBuffer: _OrthancPluginService = 6004;
pub const _OrthancPluginService__OrthancPluginService_UncompressImage: _OrthancPluginService = 6005;
pub const _OrthancPluginService__OrthancPluginService_FreeImage: _OrthancPluginService = 6006;
pub const _OrthancPluginService__OrthancPluginService_CompressImage: _OrthancPluginService = 6007;
pub const _OrthancPluginService__OrthancPluginService_ConvertPixelFormat: _OrthancPluginService =
    6008;
pub const _OrthancPluginService__OrthancPluginService_GetFontsCount: _OrthancPluginService = 6009;
pub const _OrthancPluginService__OrthancPluginService_GetFontInfo: _OrthancPluginService = 6010;
pub const _OrthancPluginService__OrthancPluginService_DrawText: _OrthancPluginService = 6011;
pub const _OrthancPluginService__OrthancPluginService_CreateImage: _OrthancPluginService = 6012;
pub const _OrthancPluginService__OrthancPluginService_CreateImageAccessor: _OrthancPluginService =
    6013;
pub const _OrthancPluginService__OrthancPluginService_DecodeDicomImage: _OrthancPluginService =
    6014;
pub const _OrthancPluginService__OrthancPluginService_WorklistAddAnswer: _OrthancPluginService =
    7000;
pub const _OrthancPluginService__OrthancPluginService_WorklistMarkIncomplete:
    _OrthancPluginService = 7001;
pub const _OrthancPluginService__OrthancPluginService_WorklistIsMatch: _OrthancPluginService = 7002;
pub const _OrthancPluginService__OrthancPluginService_WorklistGetDicomQuery: _OrthancPluginService =
    7003;
pub const _OrthancPluginService__OrthancPluginService_FindAddAnswer: _OrthancPluginService = 7004;
pub const _OrthancPluginService__OrthancPluginService_FindMarkIncomplete: _OrthancPluginService =
    7005;
pub const _OrthancPluginService__OrthancPluginService_GetFindQuerySize: _OrthancPluginService =
    7006;
pub const _OrthancPluginService__OrthancPluginService_GetFindQueryTag: _OrthancPluginService = 7007;
pub const _OrthancPluginService__OrthancPluginService_GetFindQueryTagName: _OrthancPluginService =
    7008;
pub const _OrthancPluginService__OrthancPluginService_GetFindQueryValue: _OrthancPluginService =
    7009;
pub const _OrthancPluginService__OrthancPluginService_CreateFindMatcher: _OrthancPluginService =
    7010;
pub const _OrthancPluginService__OrthancPluginService_FreeFindMatcher: _OrthancPluginService = 7011;
pub const _OrthancPluginService__OrthancPluginService_FindMatcherIsMatch: _OrthancPluginService =
    7012;
pub const _OrthancPluginService__OrthancPluginService_GetPeers: _OrthancPluginService = 8000;
pub const _OrthancPluginService__OrthancPluginService_FreePeers: _OrthancPluginService = 8001;
pub const _OrthancPluginService__OrthancPluginService_GetPeersCount: _OrthancPluginService = 8003;
pub const _OrthancPluginService__OrthancPluginService_GetPeerName: _OrthancPluginService = 8004;
pub const _OrthancPluginService__OrthancPluginService_GetPeerUrl: _OrthancPluginService = 8005;
pub const _OrthancPluginService__OrthancPluginService_CallPeerApi: _OrthancPluginService = 8006;
pub const _OrthancPluginService__OrthancPluginService_GetPeerUserProperty: _OrthancPluginService =
    8007;
pub const _OrthancPluginService__OrthancPluginService_CreateJob: _OrthancPluginService = 9000;
pub const _OrthancPluginService__OrthancPluginService_FreeJob: _OrthancPluginService = 9001;
pub const _OrthancPluginService__OrthancPluginService_SubmitJob: _OrthancPluginService = 9002;
pub const _OrthancPluginService__OrthancPluginService_RegisterJobsUnserializer:
    _OrthancPluginService = 9003;
pub const _OrthancPluginService__OrthancPluginService_INTERNAL: _OrthancPluginService = 2147483647;
pub type _OrthancPluginService = ::std::os::raw::c_uint;
#[doc = " @brief Graylevel 8bpp image.\n\n The image is graylevel. Each pixel is unsigned and stored in\n one byte."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_Grayscale8: OrthancPluginPixelFormat =
    1;
#[doc = " @brief Graylevel, unsigned 16bpp image.\n\n The image is graylevel. Each pixel is unsigned and stored in\n two bytes."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_Grayscale16: OrthancPluginPixelFormat =
    2;
#[doc = " @brief Graylevel, signed 16bpp image.\n\n The image is graylevel. Each pixel is signed and stored in two\n bytes."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_SignedGrayscale16:
    OrthancPluginPixelFormat = 3;
#[doc = " @brief Color image in RGB24 format.\n\n This format describes a color image. The pixels are stored in 3\n consecutive bytes. The memory layout is RGB."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_RGB24: OrthancPluginPixelFormat = 4;
#[doc = " @brief Color image in RGBA32 format.\n\n This format describes a color image. The pixels are stored in 4\n consecutive bytes. The memory layout is RGBA."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_RGBA32: OrthancPluginPixelFormat = 5;
#[doc = "< Unknown pixel format"]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_Unknown: OrthancPluginPixelFormat = 6;
#[doc = " @brief Color image in RGB48 format.\n\n This format describes a color image. The pixels are stored in 6\n consecutive bytes. The memory layout is RRGGBB."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_RGB48: OrthancPluginPixelFormat = 7;
#[doc = " @brief Graylevel, unsigned 32bpp image.\n\n The image is graylevel. Each pixel is unsigned and stored in\n four bytes."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_Grayscale32: OrthancPluginPixelFormat =
    8;
#[doc = " @brief Graylevel, floating-point 32bpp image.\n\n The image is graylevel. Each pixel is floating-point and stored\n in four bytes."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_Float32: OrthancPluginPixelFormat = 9;
#[doc = " @brief Color image in BGRA32 format.\n\n This format describes a color image. The pixels are stored in 4\n consecutive bytes. The memory layout is BGRA."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_BGRA32: OrthancPluginPixelFormat = 10;
#[doc = " @brief Graylevel, unsigned 64bpp image.\n\n The image is graylevel. Each pixel is unsigned and stored in\n eight bytes."]
pub const OrthancPluginPixelFormat_OrthancPluginPixelFormat_Grayscale64: OrthancPluginPixelFormat =
    11;
#[doc = " @brief Graylevel, unsigned 64bpp image.\n\n The image is graylevel. Each pixel is unsigned and stored in\n eight bytes."]
pub const OrthancPluginPixelFormat__OrthancPluginPixelFormat_INTERNAL: OrthancPluginPixelFormat =
    2147483647;
#[doc = " The memory layout of the pixels of an image.\n @ingroup Images"]
pub type OrthancPluginPixelFormat = ::std::os::raw::c_uint;
#[doc = "< Unknown content type"]
pub const OrthancPluginContentType_OrthancPluginContentType_Unknown: OrthancPluginContentType = 0;
#[doc = "< DICOM"]
pub const OrthancPluginContentType_OrthancPluginContentType_Dicom: OrthancPluginContentType = 1;
#[doc = "< JSON summary of a DICOM file"]
pub const OrthancPluginContentType_OrthancPluginContentType_DicomAsJson: OrthancPluginContentType =
    2;
#[doc = "< DICOM Header till pixel data"]
pub const OrthancPluginContentType_OrthancPluginContentType_DicomUntilPixelData:
    OrthancPluginContentType = 3;
pub const OrthancPluginContentType__OrthancPluginContentType_INTERNAL: OrthancPluginContentType =
    2147483647;
#[doc = " The content types that are supported by Orthanc plugins."]
pub type OrthancPluginContentType = ::std::os::raw::c_uint;
#[doc = "< Patient"]
pub const OrthancPluginResourceType_OrthancPluginResourceType_Patient: OrthancPluginResourceType =
    0;
#[doc = "< Study"]
pub const OrthancPluginResourceType_OrthancPluginResourceType_Study: OrthancPluginResourceType = 1;
#[doc = "< Series"]
pub const OrthancPluginResourceType_OrthancPluginResourceType_Series: OrthancPluginResourceType = 2;
#[doc = "< Instance"]
pub const OrthancPluginResourceType_OrthancPluginResourceType_Instance: OrthancPluginResourceType =
    3;
#[doc = "< Unavailable resource type"]
pub const OrthancPluginResourceType_OrthancPluginResourceType_None: OrthancPluginResourceType = 4;
pub const OrthancPluginResourceType__OrthancPluginResourceType_INTERNAL: OrthancPluginResourceType =
    2147483647;
#[doc = " The supported types of DICOM resources."]
pub type OrthancPluginResourceType = ::std::os::raw::c_uint;
#[doc = "< Series is now complete"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_CompletedSeries: OrthancPluginChangeType =
    0;
#[doc = "< Deleted resource"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_Deleted: OrthancPluginChangeType = 1;
#[doc = "< A new instance was added to this resource"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_NewChildInstance:
    OrthancPluginChangeType = 2;
#[doc = "< New instance received"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_NewInstance: OrthancPluginChangeType = 3;
#[doc = "< New patient created"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_NewPatient: OrthancPluginChangeType = 4;
#[doc = "< New series created"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_NewSeries: OrthancPluginChangeType = 5;
#[doc = "< New study created"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_NewStudy: OrthancPluginChangeType = 6;
#[doc = "< Timeout: No new instance in this patient"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_StablePatient: OrthancPluginChangeType =
    7;
#[doc = "< Timeout: No new instance in this series"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_StableSeries: OrthancPluginChangeType = 8;
#[doc = "< Timeout: No new instance in this study"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_StableStudy: OrthancPluginChangeType = 9;
#[doc = "< Orthanc has started"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_OrthancStarted: OrthancPluginChangeType =
    10;
#[doc = "< Orthanc is stopping"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_OrthancStopped: OrthancPluginChangeType =
    11;
#[doc = "< Some user-defined attachment has changed for this resource"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_UpdatedAttachment:
    OrthancPluginChangeType = 12;
#[doc = "< Some user-defined metadata has changed for this resource"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_UpdatedMetadata: OrthancPluginChangeType =
    13;
#[doc = "< The list of Orthanc peers has changed"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_UpdatedPeers: OrthancPluginChangeType =
    14;
#[doc = "< The list of DICOM modalities has changed"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_UpdatedModalities:
    OrthancPluginChangeType = 15;
#[doc = "< New Job submitted"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_JobSubmitted: OrthancPluginChangeType =
    16;
#[doc = "< A Job has completed successfully"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_JobSuccess: OrthancPluginChangeType = 17;
#[doc = "< A Job has failed"]
pub const OrthancPluginChangeType_OrthancPluginChangeType_JobFailure: OrthancPluginChangeType = 18;
pub const OrthancPluginChangeType__OrthancPluginChangeType_INTERNAL: OrthancPluginChangeType =
    2147483647;
#[doc = " The supported types of changes that can be signaled to the change callback.\n @ingroup Callbacks"]
pub type OrthancPluginChangeType = ::std::os::raw::c_uint;
#[doc = "< Standard zlib compression"]
pub const OrthancPluginCompressionType_OrthancPluginCompressionType_Zlib:
    OrthancPluginCompressionType = 0;
#[doc = "< zlib, prefixed with uncompressed size (uint64_t)"]
pub const OrthancPluginCompressionType_OrthancPluginCompressionType_ZlibWithSize:
    OrthancPluginCompressionType = 1;
#[doc = "< Standard gzip compression"]
pub const OrthancPluginCompressionType_OrthancPluginCompressionType_Gzip:
    OrthancPluginCompressionType = 2;
#[doc = "< gzip, prefixed with uncompressed size (uint64_t)"]
pub const OrthancPluginCompressionType_OrthancPluginCompressionType_GzipWithSize:
    OrthancPluginCompressionType = 3;
pub const OrthancPluginCompressionType__OrthancPluginCompressionType_INTERNAL:
    OrthancPluginCompressionType = 2147483647;
#[doc = " The compression algorithms that are supported by the Orthanc core.\n @ingroup Images"]
pub type OrthancPluginCompressionType = ::std::os::raw::c_uint;
#[doc = "< Image compressed using PNG"]
pub const OrthancPluginImageFormat_OrthancPluginImageFormat_Png: OrthancPluginImageFormat = 0;
#[doc = "< Image compressed using JPEG"]
pub const OrthancPluginImageFormat_OrthancPluginImageFormat_Jpeg: OrthancPluginImageFormat = 1;
#[doc = "< Image compressed using DICOM"]
pub const OrthancPluginImageFormat_OrthancPluginImageFormat_Dicom: OrthancPluginImageFormat = 2;
pub const OrthancPluginImageFormat__OrthancPluginImageFormat_INTERNAL: OrthancPluginImageFormat =
    2147483647;
#[doc = " The image formats that are supported by the Orthanc core.\n @ingroup Images"]
pub type OrthancPluginImageFormat = ::std::os::raw::c_uint;
#[doc = "< Application Entity"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_AE:
    OrthancPluginValueRepresentation = 1;
#[doc = "< Age String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_AS:
    OrthancPluginValueRepresentation = 2;
#[doc = "< Attribute Tag"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_AT:
    OrthancPluginValueRepresentation = 3;
#[doc = "< Code String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_CS:
    OrthancPluginValueRepresentation = 4;
#[doc = "< Date"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_DA:
    OrthancPluginValueRepresentation = 5;
#[doc = "< Decimal String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_DS:
    OrthancPluginValueRepresentation = 6;
#[doc = "< Date Time"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_DT:
    OrthancPluginValueRepresentation = 7;
#[doc = "< Floating Point Double"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_FD:
    OrthancPluginValueRepresentation = 8;
#[doc = "< Floating Point Single"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_FL:
    OrthancPluginValueRepresentation = 9;
#[doc = "< Integer String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_IS:
    OrthancPluginValueRepresentation = 10;
#[doc = "< Long String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_LO:
    OrthancPluginValueRepresentation = 11;
#[doc = "< Long Text"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_LT:
    OrthancPluginValueRepresentation = 12;
#[doc = "< Other Byte String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_OB:
    OrthancPluginValueRepresentation = 13;
#[doc = "< Other Float String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_OF:
    OrthancPluginValueRepresentation = 14;
#[doc = "< Other Word String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_OW:
    OrthancPluginValueRepresentation = 15;
#[doc = "< Person Name"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_PN:
    OrthancPluginValueRepresentation = 16;
#[doc = "< Short String"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_SH:
    OrthancPluginValueRepresentation = 17;
#[doc = "< Signed Long"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_SL:
    OrthancPluginValueRepresentation = 18;
#[doc = "< Sequence of Items"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_SQ:
    OrthancPluginValueRepresentation = 19;
#[doc = "< Signed Short"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_SS:
    OrthancPluginValueRepresentation = 20;
#[doc = "< Short Text"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_ST:
    OrthancPluginValueRepresentation = 21;
#[doc = "< Time"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_TM:
    OrthancPluginValueRepresentation = 22;
#[doc = "< Unique Identifier (UID)"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_UI:
    OrthancPluginValueRepresentation = 23;
#[doc = "< Unsigned Long"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_UL:
    OrthancPluginValueRepresentation = 24;
#[doc = "< Unknown"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_UN:
    OrthancPluginValueRepresentation = 25;
#[doc = "< Unsigned Short"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_US:
    OrthancPluginValueRepresentation = 26;
#[doc = "< Unlimited Text"]
pub const OrthancPluginValueRepresentation_OrthancPluginValueRepresentation_UT:
    OrthancPluginValueRepresentation = 27;
pub const OrthancPluginValueRepresentation__OrthancPluginValueRepresentation_INTERNAL:
    OrthancPluginValueRepresentation = 2147483647;
#[doc = " The value representations present in the DICOM standard (version 2013).\n @ingroup Toolbox"]
pub type OrthancPluginValueRepresentation = ::std::os::raw::c_uint;
#[doc = "< Full output, with most details"]
pub const OrthancPluginDicomToJsonFormat_OrthancPluginDicomToJsonFormat_Full:
    OrthancPluginDicomToJsonFormat = 1;
#[doc = "< Tags output as hexadecimal numbers"]
pub const OrthancPluginDicomToJsonFormat_OrthancPluginDicomToJsonFormat_Short:
    OrthancPluginDicomToJsonFormat = 2;
#[doc = "< Human-readable JSON"]
pub const OrthancPluginDicomToJsonFormat_OrthancPluginDicomToJsonFormat_Human:
    OrthancPluginDicomToJsonFormat = 3;
pub const OrthancPluginDicomToJsonFormat__OrthancPluginDicomToJsonFormat_INTERNAL:
    OrthancPluginDicomToJsonFormat = 2147483647;
#[doc = " The possible output formats for a DICOM-to-JSON conversion.\n @ingroup Toolbox\n @see OrthancPluginDicomToJson()"]
pub type OrthancPluginDicomToJsonFormat = ::std::os::raw::c_uint;
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_None:
    OrthancPluginDicomToJsonFlags = 0;
#[doc = "< Include the binary tags"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_IncludeBinary:
    OrthancPluginDicomToJsonFlags = 1;
#[doc = "< Include the private tags"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_IncludePrivateTags:
    OrthancPluginDicomToJsonFlags = 2;
#[doc = "< Include the tags unknown by the dictionary"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_IncludeUnknownTags:
    OrthancPluginDicomToJsonFlags = 4;
#[doc = "< Include the pixel data"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_IncludePixelData:
    OrthancPluginDicomToJsonFlags = 8;
#[doc = "< Output binary tags as-is, dropping non-ASCII"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_ConvertBinaryToAscii:
    OrthancPluginDicomToJsonFlags = 16;
#[doc = "< Signal binary tags as null values"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_ConvertBinaryToNull:
    OrthancPluginDicomToJsonFlags = 32;
#[doc = "< Stop processing after pixel data (new in 1.9.1)"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_StopAfterPixelData:
    OrthancPluginDicomToJsonFlags = 64;
#[doc = "< Skip tags whose element is zero (new in 1.9.1)"]
pub const OrthancPluginDicomToJsonFlags_OrthancPluginDicomToJsonFlags_SkipGroupLengths:
    OrthancPluginDicomToJsonFlags = 128;
pub const OrthancPluginDicomToJsonFlags__OrthancPluginDicomToJsonFlags_INTERNAL:
    OrthancPluginDicomToJsonFlags = 2147483647;
#[doc = " Flags to customize a DICOM-to-JSON conversion. By default, binary\n tags are formatted using Data URI scheme.\n @ingroup Toolbox"]
pub type OrthancPluginDicomToJsonFlags = ::std::os::raw::c_uint;
pub const OrthancPluginCreateDicomFlags_OrthancPluginCreateDicomFlags_None:
    OrthancPluginCreateDicomFlags = 0;
#[doc = "< Decode fields encoded using data URI scheme"]
pub const OrthancPluginCreateDicomFlags_OrthancPluginCreateDicomFlags_DecodeDataUriScheme:
    OrthancPluginCreateDicomFlags = 1;
#[doc = "< Automatically generate DICOM identifiers"]
pub const OrthancPluginCreateDicomFlags_OrthancPluginCreateDicomFlags_GenerateIdentifiers:
    OrthancPluginCreateDicomFlags = 2;
pub const OrthancPluginCreateDicomFlags__OrthancPluginCreateDicomFlags_INTERNAL:
    OrthancPluginCreateDicomFlags = 2147483647;
#[doc = " Flags to the creation of a DICOM file.\n @ingroup Toolbox\n @see OrthancPluginCreateDicom()"]
pub type OrthancPluginCreateDicomFlags = ::std::os::raw::c_uint;
#[doc = "< Equal"]
pub const OrthancPluginIdentifierConstraint_OrthancPluginIdentifierConstraint_Equal:
    OrthancPluginIdentifierConstraint = 1;
#[doc = "< Less or equal"]
pub const OrthancPluginIdentifierConstraint_OrthancPluginIdentifierConstraint_SmallerOrEqual:
    OrthancPluginIdentifierConstraint = 2;
#[doc = "< More or equal"]
pub const OrthancPluginIdentifierConstraint_OrthancPluginIdentifierConstraint_GreaterOrEqual:
    OrthancPluginIdentifierConstraint = 3;
#[doc = "< Case-sensitive wildcard matching (with * and ?)"]
pub const OrthancPluginIdentifierConstraint_OrthancPluginIdentifierConstraint_Wildcard:
    OrthancPluginIdentifierConstraint = 4;
pub const OrthancPluginIdentifierConstraint__OrthancPluginIdentifierConstraint_INTERNAL:
    OrthancPluginIdentifierConstraint = 2147483647;
#[doc = " The constraints on the DICOM identifiers that must be supported\n by the database plugins.\n @deprecated Plugins using OrthancPluginConstraintType will be faster"]
pub type OrthancPluginIdentifierConstraint = ::std::os::raw::c_uint;
#[doc = "< Equal"]
pub const OrthancPluginConstraintType_OrthancPluginConstraintType_Equal:
    OrthancPluginConstraintType = 1;
#[doc = "< Less or equal"]
pub const OrthancPluginConstraintType_OrthancPluginConstraintType_SmallerOrEqual:
    OrthancPluginConstraintType = 2;
#[doc = "< More or equal"]
pub const OrthancPluginConstraintType_OrthancPluginConstraintType_GreaterOrEqual:
    OrthancPluginConstraintType = 3;
#[doc = "< Wildcard matching"]
pub const OrthancPluginConstraintType_OrthancPluginConstraintType_Wildcard:
    OrthancPluginConstraintType = 4;
#[doc = "< List of values"]
pub const OrthancPluginConstraintType_OrthancPluginConstraintType_List:
    OrthancPluginConstraintType = 5;
pub const OrthancPluginConstraintType__OrthancPluginConstraintType_INTERNAL:
    OrthancPluginConstraintType = 2147483647;
#[doc = " The constraints on the tags (main DICOM tags and identifier tags)\n that must be supported by the database plugins."]
pub type OrthancPluginConstraintType = ::std::os::raw::c_uint;
#[doc = "< Unknown origin"]
pub const OrthancPluginInstanceOrigin_OrthancPluginInstanceOrigin_Unknown:
    OrthancPluginInstanceOrigin = 1;
#[doc = "< Instance received through DICOM protocol"]
pub const OrthancPluginInstanceOrigin_OrthancPluginInstanceOrigin_DicomProtocol:
    OrthancPluginInstanceOrigin = 2;
#[doc = "< Instance received through REST API of Orthanc"]
pub const OrthancPluginInstanceOrigin_OrthancPluginInstanceOrigin_RestApi:
    OrthancPluginInstanceOrigin = 3;
#[doc = "< Instance added to Orthanc by a plugin"]
pub const OrthancPluginInstanceOrigin_OrthancPluginInstanceOrigin_Plugin:
    OrthancPluginInstanceOrigin = 4;
#[doc = "< Instance added to Orthanc by a Lua script"]
pub const OrthancPluginInstanceOrigin_OrthancPluginInstanceOrigin_Lua: OrthancPluginInstanceOrigin =
    5;
#[doc = "< Instance received through WebDAV (new in 1.8.0)"]
pub const OrthancPluginInstanceOrigin_OrthancPluginInstanceOrigin_WebDav:
    OrthancPluginInstanceOrigin = 6;
pub const OrthancPluginInstanceOrigin__OrthancPluginInstanceOrigin_INTERNAL:
    OrthancPluginInstanceOrigin = 2147483647;
#[doc = " The origin of a DICOM instance that has been received by Orthanc."]
pub type OrthancPluginInstanceOrigin = ::std::os::raw::c_uint;
#[doc = "< The job has successfully executed all its steps"]
pub const OrthancPluginJobStepStatus_OrthancPluginJobStepStatus_Success:
    OrthancPluginJobStepStatus = 1;
#[doc = "< The job has failed while executing this step"]
pub const OrthancPluginJobStepStatus_OrthancPluginJobStepStatus_Failure:
    OrthancPluginJobStepStatus = 2;
#[doc = "< The job has still data to process after this step"]
pub const OrthancPluginJobStepStatus_OrthancPluginJobStepStatus_Continue:
    OrthancPluginJobStepStatus = 3;
#[doc = " The possible status for one single step of a job."]
pub type OrthancPluginJobStepStatus = ::std::os::raw::c_uint;
#[doc = "< The job has succeeded"]
pub const OrthancPluginJobStopReason_OrthancPluginJobStopReason_Success:
    OrthancPluginJobStopReason = 1;
#[doc = "< The job was paused, and will be resumed later"]
pub const OrthancPluginJobStopReason_OrthancPluginJobStopReason_Paused: OrthancPluginJobStopReason =
    2;
#[doc = "< The job has failed, and might be resubmitted later"]
pub const OrthancPluginJobStopReason_OrthancPluginJobStopReason_Failure:
    OrthancPluginJobStopReason = 3;
#[doc = "< The job was canceled, and might be resubmitted later"]
pub const OrthancPluginJobStopReason_OrthancPluginJobStopReason_Canceled:
    OrthancPluginJobStopReason = 4;
#[doc = " Explains why the job should stop and release the resources it has\n allocated. This is especially important to disambiguate between\n the \"paused\" condition and the \"final\" conditions (success,\n failure, or canceled)."]
pub type OrthancPluginJobStopReason = ::std::os::raw::c_uint;
#[doc = "< Default metrics"]
pub const OrthancPluginMetricsType_OrthancPluginMetricsType_Default: OrthancPluginMetricsType = 0;
#[doc = " This metrics represents a time duration. Orthanc will keep the\n maximum value of the metrics over a sliding window of ten\n seconds, which is useful if the metrics is sampled frequently."]
pub const OrthancPluginMetricsType_OrthancPluginMetricsType_Timer: OrthancPluginMetricsType = 1;
#[doc = " The available types of metrics."]
pub type OrthancPluginMetricsType = ::std::os::raw::c_uint;
#[doc = "< Don't include binary tags"]
pub const OrthancPluginDicomWebBinaryMode_OrthancPluginDicomWebBinaryMode_Ignore:
    OrthancPluginDicomWebBinaryMode = 0;
#[doc = "< Inline encoding using Base64"]
pub const OrthancPluginDicomWebBinaryMode_OrthancPluginDicomWebBinaryMode_InlineBinary:
    OrthancPluginDicomWebBinaryMode = 1;
#[doc = "< Use a bulk data URI field"]
pub const OrthancPluginDicomWebBinaryMode_OrthancPluginDicomWebBinaryMode_BulkDataUri:
    OrthancPluginDicomWebBinaryMode = 2;
#[doc = " The available modes to export a binary DICOM tag into a DICOMweb\n JSON or XML document."]
pub type OrthancPluginDicomWebBinaryMode = ::std::os::raw::c_uint;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_Success : OrthancPluginStorageCommitmentFailureReason = 0 ;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_ProcessingFailure : OrthancPluginStorageCommitmentFailureReason = 1 ;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_NoSuchObjectInstance : OrthancPluginStorageCommitmentFailureReason = 2 ;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_ResourceLimitation : OrthancPluginStorageCommitmentFailureReason = 3 ;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_ReferencedSOPClassNotSupported : OrthancPluginStorageCommitmentFailureReason = 4 ;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_ClassInstanceConflict : OrthancPluginStorageCommitmentFailureReason = 5 ;
pub const OrthancPluginStorageCommitmentFailureReason_OrthancPluginStorageCommitmentFailureReason_DuplicateTransactionUID : OrthancPluginStorageCommitmentFailureReason = 6 ;
#[doc = " The available values for the Failure Reason (0008,1197) during\n storage commitment.\n http://dicom.nema.org/medical/dicom/2019e/output/chtml/part03/sect_C.14.html#sect_C.14.1.1"]
pub type OrthancPluginStorageCommitmentFailureReason = ::std::os::raw::c_uint;
#[doc = "< Keep the instance as is"]
pub const OrthancPluginReceivedInstanceAction_OrthancPluginReceivedInstanceAction_KeepAsIs:
    OrthancPluginReceivedInstanceAction = 1;
#[doc = "< Modify the instance"]
pub const OrthancPluginReceivedInstanceAction_OrthancPluginReceivedInstanceAction_Modify:
    OrthancPluginReceivedInstanceAction = 2;
#[doc = "< Discard the instance"]
pub const OrthancPluginReceivedInstanceAction_OrthancPluginReceivedInstanceAction_Discard:
    OrthancPluginReceivedInstanceAction = 3;
pub const OrthancPluginReceivedInstanceAction__OrthancPluginReceivedInstanceAction_INTERNAL:
    OrthancPluginReceivedInstanceAction = 2147483647;
#[doc = " The action to be taken after ReceivedInstanceCallback is triggered"]
pub type OrthancPluginReceivedInstanceAction = ::std::os::raw::c_uint;
#[doc = " @brief A 32-bit memory buffer allocated by the core system of Orthanc.\n\n A memory buffer allocated by the core system of Orthanc. When the\n content of the buffer is not useful anymore, it must be free by a\n call to ::OrthancPluginFreeMemoryBuffer()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrthancPluginMemoryBuffer {
    #[doc = " @brief The content of the buffer."]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " @brief The number of bytes in the buffer."]
    pub size: u32,
}
#[doc = " @brief A 64-bit memory buffer allocated by the core system of Orthanc.\n\n A memory buffer allocated by the core system of Orthanc. When the\n content of the buffer is not useful anymore, it must be free by a\n call to ::OrthancPluginFreeMemoryBuffer64()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrthancPluginMemoryBuffer64 {
    #[doc = " @brief The content of the buffer."]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " @brief The number of bytes in the buffer."]
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginRestOutput_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that represents the HTTP connection to the client application.\n @ingroup Callbacks"]
pub type OrthancPluginRestOutput = _OrthancPluginRestOutput_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginDicomInstance_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that represents a DICOM instance that is managed by the Orthanc core.\n @ingroup DicomInstance"]
pub type OrthancPluginDicomInstance = _OrthancPluginDicomInstance_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginImage_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that represents an image that is uncompressed in memory.\n @ingroup Images"]
pub type OrthancPluginImage = _OrthancPluginImage_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginStorageArea_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that represents the storage area that is actually used by Orthanc.\n @ingroup Images"]
pub type OrthancPluginStorageArea = _OrthancPluginStorageArea_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginWorklistQuery_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to an object that represents a C-Find query for worklists.\n @ingroup DicomCallbacks"]
pub type OrthancPluginWorklistQuery = _OrthancPluginWorklistQuery_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginWorklistAnswers_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to an object that represents the answers to a C-Find query for worklists.\n @ingroup DicomCallbacks"]
pub type OrthancPluginWorklistAnswers = _OrthancPluginWorklistAnswers_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginFindQuery_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to an object that represents a C-Find query.\n @ingroup DicomCallbacks"]
pub type OrthancPluginFindQuery = _OrthancPluginFindQuery_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginFindAnswers_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to an object that represents the answers to a C-Find query for worklists.\n @ingroup DicomCallbacks"]
pub type OrthancPluginFindAnswers = _OrthancPluginFindAnswers_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginFindMatcher_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to an object that can be used to check whether a DICOM instance matches a C-Find query.\n @ingroup Toolbox"]
pub type OrthancPluginFindMatcher = _OrthancPluginFindMatcher_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginPeers_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to the set of remote Orthanc Peers that are known to the local Orthanc server.\n @ingroup Toolbox"]
pub type OrthancPluginPeers = _OrthancPluginPeers_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginJob_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure to a job to be executed by Orthanc.\n @ingroup Toolbox"]
pub type OrthancPluginJob = _OrthancPluginJob_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginDicomWebNode_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that represents a node in a JSON or XML\n document used in DICOMweb.\n @ingroup Toolbox"]
pub type OrthancPluginDicomWebNode = _OrthancPluginDicomWebNode_t;
#[doc = " @brief Signature of a callback function that answers to a REST request.\n @ingroup Callbacks"]
pub type OrthancPluginRestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        output: *mut OrthancPluginRestOutput,
        url: *const ::std::os::raw::c_char,
        request: *const OrthancPluginHttpRequest,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Signature of a callback function that is triggered when Orthanc stores a new DICOM instance.\n @ingroup Callbacks"]
pub type OrthancPluginOnStoredInstanceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *const OrthancPluginDicomInstance,
        instanceId: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Signature of a callback function that is triggered when a change happens to some DICOM resource.\n @ingroup Callbacks"]
pub type OrthancPluginOnChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        changeType: OrthancPluginChangeType,
        resourceType: OrthancPluginResourceType,
        resourceId: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Signature of a callback function to decode a DICOM instance as an image.\n @ingroup Callbacks"]
pub type OrthancPluginDecodeImageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut *mut OrthancPluginImage,
        dicom: *const ::std::os::raw::c_void,
        size: u32,
        frameIndex: u32,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Signature of a function to free dynamic memory.\n @ingroup Callbacks"]
pub type OrthancPluginFree =
    ::std::option::Option<unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_void)>;
#[doc = " @brief Signature of a function to set the content of a node\n encoding a binary DICOM tag, into a JSON or XML document\n generated for DICOMweb.\n @ingroup Callbacks"]
pub type OrthancPluginDicomWebSetBinaryNode = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut OrthancPluginDicomWebNode,
        mode: OrthancPluginDicomWebBinaryMode,
        bulkDataUri: *const ::std::os::raw::c_char,
    ),
>;
#[doc = " @brief Callback for writing to the storage area.\n\n Signature of a callback function that is triggered when Orthanc writes a file to the storage area.\n\n @param uuid The UUID of the file.\n @param content The content of the file.\n @param size The size of the file.\n @param type The content type corresponding to this file.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginStorageCreate = ::std::option::Option<
    unsafe extern "C" fn(
        uuid: *const ::std::os::raw::c_char,
        content: *const ::std::os::raw::c_void,
        size: i64,
        type_: OrthancPluginContentType,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for reading from the storage area.\n\n Signature of a callback function that is triggered when Orthanc reads a file from the storage area.\n\n @param content The content of the file (output).\n @param size The size of the file (output).\n @param uuid The UUID of the file of interest.\n @param type The content type corresponding to this file.\n @return 0 if success, other value if error.\n @ingroup Callbacks\n @deprecated New plugins should use OrthancPluginStorageRead2\n\n @warning The \"content\" buffer *must* have been allocated using\n the \"malloc()\" function of your C standard library (i.e. nor\n \"new[]\", neither a pointer to a buffer). The \"free()\" function of\n your C standard library will automatically be invoked on the\n \"content\" pointer."]
pub type OrthancPluginStorageRead = ::std::option::Option<
    unsafe extern "C" fn(
        content: *mut *mut ::std::os::raw::c_void,
        size: *mut i64,
        uuid: *const ::std::os::raw::c_char,
        type_: OrthancPluginContentType,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for reading a whole file from the storage area.\n\n Signature of a callback function that is triggered when Orthanc\n reads a whole file from the storage area.\n\n @param target Memory buffer where to store the content of the file. It must be allocated by the\n plugin using OrthancPluginCreateMemoryBuffer64(). The core of Orthanc will free it.\n @param uuid The UUID of the file of interest.\n @param type The content type corresponding to this file.\n @ingroup Callbacks"]
pub type OrthancPluginStorageReadWhole = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut OrthancPluginMemoryBuffer64,
        uuid: *const ::std::os::raw::c_char,
        type_: OrthancPluginContentType,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for reading a range of a file from the storage area.\n\n Signature of a callback function that is triggered when Orthanc\n reads a portion of a file from the storage area. Orthanc\n indicates the start position and the length of the range.\n\n @param target Memory buffer where to store the content of the range.\n The memory buffer is allocated and freed by Orthanc. The length of the range\n of interest corresponds to the size of this buffer.\n @param uuid The UUID of the file of interest.\n @param type The content type corresponding to this file.\n @param rangeStart Start position of the requested range in the file.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginStorageReadRange = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut OrthancPluginMemoryBuffer64,
        uuid: *const ::std::os::raw::c_char,
        type_: OrthancPluginContentType,
        rangeStart: u64,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for removing a file from the storage area.\n\n Signature of a callback function that is triggered when Orthanc deletes a file from the storage area.\n\n @param uuid The UUID of the file to be removed.\n @param type The content type corresponding to this file.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginStorageRemove = ::std::option::Option<
    unsafe extern "C" fn(
        uuid: *const ::std::os::raw::c_char,
        type_: OrthancPluginContentType,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to handle the C-Find SCP requests for worklists.\n\n Signature of a callback function that is triggered when Orthanc\n receives a C-Find SCP request against modality worklists.\n\n @param answers The target structure where answers must be stored.\n @param query The worklist query.\n @param issuerAet The Application Entity Title (AET) of the modality from which the request originates.\n @param calledAet The Application Entity Title (AET) of the modality that is called by the request.\n @return 0 if success, other value if error.\n @ingroup DicomCallbacks"]
pub type OrthancPluginWorklistCallback = ::std::option::Option<
    unsafe extern "C" fn(
        answers: *mut OrthancPluginWorklistAnswers,
        query: *const OrthancPluginWorklistQuery,
        issuerAet: *const ::std::os::raw::c_char,
        calledAet: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to filter incoming HTTP requests received by Orthanc.\n\n Signature of a callback function that is triggered whenever\n Orthanc receives an HTTP/REST request, and that answers whether\n this request should be allowed. If the callback returns \"0\"\n (\"false\"), the server answers with HTTP status code 403\n (Forbidden).\n\n Pay attention to the fact that this function may be invoked\n concurrently by different threads of the Web server of\n Orthanc. You must implement proper locking if applicable.\n\n @param method The HTTP method used by the request.\n @param uri The URI of interest.\n @param ip The IP address of the HTTP client.\n @param headersCount The number of HTTP headers.\n @param headersKeys The keys of the HTTP headers (always converted to low-case).\n @param headersValues The values of the HTTP headers.\n @return 0 if forbidden access, 1 if allowed access, -1 if error.\n @ingroup Callbacks\n @deprecated Please instead use OrthancPluginIncomingHttpRequestFilter2()"]
pub type OrthancPluginIncomingHttpRequestFilter = ::std::option::Option<
    unsafe extern "C" fn(
        method: OrthancPluginHttpMethod,
        uri: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
        headersCount: u32,
        headersKeys: *const *const ::std::os::raw::c_char,
        headersValues: *const *const ::std::os::raw::c_char,
    ) -> i32,
>;
#[doc = " @brief Callback to filter incoming HTTP requests received by Orthanc.\n\n Signature of a callback function that is triggered whenever\n Orthanc receives an HTTP/REST request, and that answers whether\n this request should be allowed. If the callback returns \"0\"\n (\"false\"), the server answers with HTTP status code 403\n (Forbidden).\n\n Pay attention to the fact that this function may be invoked\n concurrently by different threads of the Web server of\n Orthanc. You must implement proper locking if applicable.\n\n @param method The HTTP method used by the request.\n @param uri The URI of interest.\n @param ip The IP address of the HTTP client.\n @param headersCount The number of HTTP headers.\n @param headersKeys The keys of the HTTP headers (always converted to low-case).\n @param headersValues The values of the HTTP headers.\n @param getArgumentsCount The number of GET arguments (only for the GET HTTP method).\n @param getArgumentsKeys The keys of the GET arguments (only for the GET HTTP method).\n @param getArgumentsValues The values of the GET arguments (only for the GET HTTP method).\n @return 0 if forbidden access, 1 if allowed access, -1 if error.\n @ingroup Callbacks"]
pub type OrthancPluginIncomingHttpRequestFilter2 = ::std::option::Option<
    unsafe extern "C" fn(
        method: OrthancPluginHttpMethod,
        uri: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
        headersCount: u32,
        headersKeys: *const *const ::std::os::raw::c_char,
        headersValues: *const *const ::std::os::raw::c_char,
        getArgumentsCount: u32,
        getArgumentsKeys: *const *const ::std::os::raw::c_char,
        getArgumentsValues: *const *const ::std::os::raw::c_char,
    ) -> i32,
>;
#[doc = " @brief Callback to handle incoming C-Find SCP requests.\n\n Signature of a callback function that is triggered whenever\n Orthanc receives a C-Find SCP request not concerning modality\n worklists.\n\n @param answers The target structure where answers must be stored.\n @param query The worklist query.\n @param issuerAet The Application Entity Title (AET) of the modality from which the request originates.\n @param calledAet The Application Entity Title (AET) of the modality that is called by the request.\n @return 0 if success, other value if error.\n @ingroup DicomCallbacks"]
pub type OrthancPluginFindCallback = ::std::option::Option<
    unsafe extern "C" fn(
        answers: *mut OrthancPluginFindAnswers,
        query: *const OrthancPluginFindQuery,
        issuerAet: *const ::std::os::raw::c_char,
        calledAet: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to handle incoming C-Move SCP requests.\n\n Signature of a callback function that is triggered whenever\n Orthanc receives a C-Move SCP request. The callback receives the\n type of the resource of interest (study, series, instance...)\n together with the DICOM tags containing its identifiers. In turn,\n the plugin must create a driver object that will be responsible\n for driving the successive move suboperations.\n\n @param resourceType The type of the resource of interest. Note\n that this might be set to ResourceType_None if the\n QueryRetrieveLevel (0008,0052) tag was not provided by the\n issuer (i.e. the originator modality).\n @param patientId Content of the PatientID (0x0010, 0x0020) tag of the resource of interest. Might be NULL.\n @param accessionNumber Content of the AccessionNumber (0x0008, 0x0050) tag. Might be NULL.\n @param studyInstanceUid Content of the StudyInstanceUID (0x0020, 0x000d) tag. Might be NULL.\n @param seriesInstanceUid Content of the SeriesInstanceUID (0x0020, 0x000e) tag. Might be NULL.\n @param sopInstanceUid Content of the SOPInstanceUID (0x0008, 0x0018) tag. Might be NULL.\n @param originatorAet The Application Entity Title (AET) of the\n modality from which the request originates.\n @param sourceAet The Application Entity Title (AET) of the\n modality that should send its DICOM files to another modality.\n @param targetAet The Application Entity Title (AET) of the\n modality that should receive the DICOM files.\n @param originatorId The Message ID issued by the originator modality,\n as found in tag (0000,0110) of the DICOM query emitted by the issuer.\n\n @return The NULL value if the plugin cannot deal with this query,\n or a pointer to the driver object that is responsible for\n handling the successive move suboperations.\n\n @note If targetAet equals sourceAet, this is actually a query/retrieve operation.\n @ingroup DicomCallbacks"]
pub type OrthancPluginMoveCallback = ::std::option::Option<
    unsafe extern "C" fn(
        resourceType: OrthancPluginResourceType,
        patientId: *const ::std::os::raw::c_char,
        accessionNumber: *const ::std::os::raw::c_char,
        studyInstanceUid: *const ::std::os::raw::c_char,
        seriesInstanceUid: *const ::std::os::raw::c_char,
        sopInstanceUid: *const ::std::os::raw::c_char,
        originatorAet: *const ::std::os::raw::c_char,
        sourceAet: *const ::std::os::raw::c_char,
        targetAet: *const ::std::os::raw::c_char,
        originatorId: u16,
    ) -> *mut ::std::os::raw::c_void,
>;
#[doc = " @brief Callback to read the size of a C-Move driver.\n\n Signature of a callback function that returns the number of\n C-Move suboperations that are to be achieved by the given C-Move\n driver. This driver is the return value of a previous call to the\n OrthancPluginMoveCallback() callback.\n\n @param moveDriver The C-Move driver of interest.\n @return The number of suboperations.\n @ingroup DicomCallbacks"]
pub type OrthancPluginGetMoveSize =
    ::std::option::Option<unsafe extern "C" fn(moveDriver: *mut ::std::os::raw::c_void) -> u32>;
#[doc = " @brief Callback to apply one C-Move suboperation.\n\n Signature of a callback function that applies the next C-Move\n suboperation that os to be achieved by the given C-Move\n driver. This driver is the return value of a previous call to the\n OrthancPluginMoveCallback() callback.\n\n @param moveDriver The C-Move driver of interest.\n @return 0 if success, or the error code if failure.\n @ingroup DicomCallbacks"]
pub type OrthancPluginApplyMove = ::std::option::Option<
    unsafe extern "C" fn(moveDriver: *mut ::std::os::raw::c_void) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to free one C-Move driver.\n\n Signature of a callback function that releases the resources\n allocated by the given C-Move driver. This driver is the return\n value of a previous call to the OrthancPluginMoveCallback()\n callback.\n\n @param moveDriver The C-Move driver of interest.\n @ingroup DicomCallbacks"]
pub type OrthancPluginFreeMove =
    ::std::option::Option<unsafe extern "C" fn(moveDriver: *mut ::std::os::raw::c_void)>;
#[doc = " @brief Callback to finalize one custom job.\n\n Signature of a callback function that releases all the resources\n allocated by the given job. This job is the argument provided to\n OrthancPluginCreateJob().\n\n @param job The job of interest.\n @ingroup Toolbox"]
pub type OrthancPluginJobFinalize =
    ::std::option::Option<unsafe extern "C" fn(job: *mut ::std::os::raw::c_void)>;
#[doc = " @brief Callback to check the progress of one custom job.\n\n Signature of a callback function that returns the progress of the\n job.\n\n @param job The job of interest.\n @return The progress, as a floating-point number ranging from 0 to 1.\n @ingroup Toolbox"]
pub type OrthancPluginJobGetProgress =
    ::std::option::Option<unsafe extern "C" fn(job: *mut ::std::os::raw::c_void) -> f32>;
#[doc = " @brief Callback to retrieve the content of one custom job.\n\n Signature of a callback function that returns human-readable\n statistics about the job. This statistics must be formatted as a\n JSON object. This information is notably displayed in the \"Jobs\"\n tab of \"Orthanc Explorer\".\n\n @param job The job of interest.\n @return The statistics, as a JSON object encoded as a string.\n @ingroup Toolbox"]
pub type OrthancPluginJobGetContent = ::std::option::Option<
    unsafe extern "C" fn(job: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
>;
#[doc = " @brief Callback to serialize one custom job.\n\n Signature of a callback function that returns a serialized\n version of the job, formatted as a JSON object. This\n serialization is stored in the Orthanc database, and is used to\n reload the job on the restart of Orthanc. The \"unserialization\"\n callback (with OrthancPluginJobsUnserializer signature) will\n receive this serialized object.\n\n @param job The job of interest.\n @return The serialized job, as a JSON object encoded as a string.\n @see OrthancPluginRegisterJobsUnserializer()\n @ingroup Toolbox"]
pub type OrthancPluginJobGetSerialized = ::std::option::Option<
    unsafe extern "C" fn(job: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
>;
#[doc = " @brief Callback to execute one step of a custom job.\n\n Signature of a callback function that executes one step in the\n job. The jobs engine of Orthanc will make successive calls to\n this method, as long as it returns\n OrthancPluginJobStepStatus_Continue.\n\n @param job The job of interest.\n @return The status of execution.\n @ingroup Toolbox"]
pub type OrthancPluginJobStep = ::std::option::Option<
    unsafe extern "C" fn(job: *mut ::std::os::raw::c_void) -> OrthancPluginJobStepStatus,
>;
#[doc = " @brief Callback executed once one custom job leaves the \"running\" state.\n\n Signature of a callback function that is invoked once a job\n leaves the \"running\" state. This can happen if the previous call\n to OrthancPluginJobStep has failed/succeeded, if the host Orthanc\n server is being stopped, or if the user manually tags the job as\n paused/canceled. This callback allows the plugin to free\n resources allocated for running this custom job (e.g. to stop\n threads, or to remove temporary files).\n\n Note that handling pauses might involves a specific treatment\n (such a stopping threads, but keeping temporary files on the\n disk). This \"paused\" situation can be checked by looking at the\n \"reason\" parameter.\n\n @param job The job of interest.\n @param reason The reason for leaving the \"running\" state.\n @return 0 if success, or the error code if failure.\n @ingroup Toolbox"]
pub type OrthancPluginJobStop = ::std::option::Option<
    unsafe extern "C" fn(
        job: *mut ::std::os::raw::c_void,
        reason: OrthancPluginJobStopReason,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback executed once one stopped custom job is started again.\n\n Signature of a callback function that is invoked once a job\n leaves the \"failure/canceled\" state, to be started again. This\n function will typically reset the progress to zero. Note that\n before being actually executed, the job would first be tagged as\n \"pending\" in the Orthanc jobs engine.\n\n @param job The job of interest.\n @return 0 if success, or the error code if failure.\n @ingroup Toolbox"]
pub type OrthancPluginJobReset = ::std::option::Option<
    unsafe extern "C" fn(job: *mut ::std::os::raw::c_void) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback executed to unserialize a custom job.\n\n Signature of a callback function that unserializes a job that was\n saved in the Orthanc database.\n\n @param jobType The type of the job, as provided to OrthancPluginCreateJob().\n @param serialized The serialization of the job, as provided by OrthancPluginJobGetSerialized.\n @return The unserialized job (as created by OrthancPluginCreateJob()), or NULL\n if this unserializer cannot handle this job type.\n @see OrthancPluginRegisterJobsUnserializer()\n @ingroup Callbacks"]
pub type OrthancPluginJobsUnserializer = ::std::option::Option<
    unsafe extern "C" fn(
        jobType: *const ::std::os::raw::c_char,
        serialized: *const ::std::os::raw::c_char,
    ) -> *mut OrthancPluginJob,
>;
#[doc = " @brief Callback executed to update the metrics of the plugin.\n\n Signature of a callback function that is called by Orthanc\n whenever a monitoring tool (such as Prometheus) asks the current\n values of the metrics. This callback gives the plugin a chance to\n update its metrics, by calling OrthancPluginSetMetricsValue().\n This is typically useful for metrics that are expensive to\n acquire.\n\n @see OrthancPluginRegisterRefreshMetrics()\n @ingroup Callbacks"]
pub type OrthancPluginRefreshMetricsCallback = ::std::option::Option<unsafe extern "C" fn()>;
#[doc = " @brief Callback executed to encode a binary tag in DICOMweb.\n\n Signature of a callback function that is called by Orthanc\n whenever a DICOM tag that contains a binary value must be written\n to a JSON or XML node, while a DICOMweb document is being\n generated. The value representation (VR) of the DICOM tag can be\n OB, OD, OF, OL, OW, or UN.\n\n @see OrthancPluginEncodeDicomWebJson() and OrthancPluginEncodeDicomWebXml()\n @param node The node being generated, as provided by Orthanc.\n @param setter The setter to be used to encode the content of the node. If\n the setter is not called, the binary tag is not written to the output document.\n @param levelDepth The depth of the node in the DICOM hierarchy of sequences.\n This parameter gives the number of elements in the \"levelTagGroup\",\n \"levelTagElement\", and \"levelIndex\" arrays.\n @param levelTagGroup The group of the parent DICOM tags in the hierarchy.\n @param levelTagElement The element of the parent DICOM tags in the hierarchy.\n @param levelIndex The index of the node in the parent sequences of the hierarchy.\n @param tagGroup The group of the DICOM tag of interest.\n @param tagElement The element of the DICOM tag of interest.\n @param vr The value representation of the binary DICOM node.\n @ingroup Callbacks"]
pub type OrthancPluginDicomWebBinaryCallback = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut OrthancPluginDicomWebNode,
        setter: OrthancPluginDicomWebSetBinaryNode,
        levelDepth: u32,
        levelTagGroup: *const u16,
        levelTagElement: *const u16,
        levelIndex: *const u32,
        tagGroup: u16,
        tagElement: u16,
        vr: OrthancPluginValueRepresentation,
    ),
>;
#[doc = " @brief Callback executed to encode a binary tag in DICOMweb.\n\n Signature of a callback function that is called by Orthanc\n whenever a DICOM tag that contains a binary value must be written\n to a JSON or XML node, while a DICOMweb document is being\n generated. The value representation (VR) of the DICOM tag can be\n OB, OD, OF, OL, OW, or UN.\n\n @see OrthancPluginEncodeDicomWebJson() and OrthancPluginEncodeDicomWebXml()\n @param node The node being generated, as provided by Orthanc.\n @param setter The setter to be used to encode the content of the node. If\n the setter is not called, the binary tag is not written to the output document.\n @param levelDepth The depth of the node in the DICOM hierarchy of sequences.\n This parameter gives the number of elements in the \"levelTagGroup\",\n \"levelTagElement\", and \"levelIndex\" arrays.\n @param levelTagGroup The group of the parent DICOM tags in the hierarchy.\n @param levelTagElement The element of the parent DICOM tags in the hierarchy.\n @param levelIndex The index of the node in the parent sequences of the hierarchy.\n @param tagGroup The group of the DICOM tag of interest.\n @param tagElement The element of the DICOM tag of interest.\n @param vr The value representation of the binary DICOM node.\n @param payload The user payload.\n @ingroup Callbacks"]
pub type OrthancPluginDicomWebBinaryCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut OrthancPluginDicomWebNode,
        setter: OrthancPluginDicomWebSetBinaryNode,
        levelDepth: u32,
        levelTagGroup: *const u16,
        levelTagElement: *const u16,
        levelIndex: *const u32,
        tagGroup: u16,
        tagElement: u16,
        vr: OrthancPluginValueRepresentation,
        payload: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " @brief Data structure that contains information about the Orthanc core."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginContext_t {
    pub pluginsManager: *mut ::std::os::raw::c_void,
    pub orthancVersion: *const ::std::os::raw::c_char,
    pub Free: OrthancPluginFree,
    pub InvokeService: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut _OrthancPluginContext_t,
            service: _OrthancPluginService,
            params: *const ::std::os::raw::c_void,
        ) -> OrthancPluginErrorCode,
    >,
}
#[doc = " @brief Data structure that contains information about the Orthanc core."]
pub type OrthancPluginContext = _OrthancPluginContext_t;
#[doc = " @brief An entry in the dictionary of DICOM tags."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrthancPluginDictionaryEntry {
    #[doc = "< The group of the tag"]
    pub group: u16,
    #[doc = "< The element of the tag"]
    pub element: u16,
    #[doc = "< The value representation of the tag"]
    pub vr: OrthancPluginValueRepresentation,
    #[doc = "< The minimum multiplicity of the tag"]
    pub minMultiplicity: u32,
    #[doc = "< The maximum multiplicity of the tag (0 means arbitrary)"]
    pub maxMultiplicity: u32,
}
#[doc = " @brief Callback executed when a HTTP header is received during a chunked transfer.\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP client during a chunked HTTP transfer, as soon as it\n receives one HTTP header from the answer of the remote HTTP\n server.\n\n @see OrthancPluginChunkedHttpClient()\n @param answer The user payload, as provided by the calling plugin.\n @param key The key of the HTTP header.\n @param value The value of the HTTP header.\n @return 0 if success, or the error code if failure.\n @ingroup Toolbox"]
pub type OrthancPluginChunkedClientAnswerAddHeader = ::std::option::Option<
    unsafe extern "C" fn(
        answer: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback executed when an answer chunk is received during a chunked transfer.\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP client during a chunked HTTP transfer, as soon as it\n receives one data chunk from the answer of the remote HTTP\n server.\n\n @see OrthancPluginChunkedHttpClient()\n @param answer The user payload, as provided by the calling plugin.\n @param data The content of the data chunk.\n @param size The size of the data chunk.\n @return 0 if success, or the error code if failure.\n @ingroup Toolbox"]
pub type OrthancPluginChunkedClientAnswerAddChunk = ::std::option::Option<
    unsafe extern "C" fn(
        answer: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
        size: u32,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to know whether the request body is entirely read during a chunked transfer\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP client during a chunked HTTP transfer, while reading\n the body of a POST or PUT request. The plugin must answer \"1\" as\n soon as the body is entirely read: The \"request\" data structure\n must act as an iterator.\n\n @see OrthancPluginChunkedHttpClient()\n @param request The user payload, as provided by the calling plugin.\n @return \"1\" if the body is over, or \"0\" if there is still data to be read.\n @ingroup Toolbox"]
pub type OrthancPluginChunkedClientRequestIsDone =
    ::std::option::Option<unsafe extern "C" fn(request: *mut ::std::os::raw::c_void) -> u8>;
#[doc = " @brief Callback to advance in the request body during a chunked transfer\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP client during a chunked HTTP transfer, while reading\n the body of a POST or PUT request. This function asks the plugin\n to advance to the next chunk of data of the request body: The\n \"request\" data structure must act as an iterator.\n\n @see OrthancPluginChunkedHttpClient()\n @param request The user payload, as provided by the calling plugin.\n @return 0 if success, or the error code if failure.\n @ingroup Toolbox"]
pub type OrthancPluginChunkedClientRequestNext = ::std::option::Option<
    unsafe extern "C" fn(request: *mut ::std::os::raw::c_void) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to read the current chunk of the request body during a chunked transfer\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP client during a chunked HTTP transfer, while reading\n the body of a POST or PUT request. The plugin must provide the\n content of the current chunk of data of the request body.\n\n @see OrthancPluginChunkedHttpClient()\n @param request The user payload, as provided by the calling plugin.\n @return The content of the current request chunk.\n @ingroup Toolbox"]
pub type OrthancPluginChunkedClientRequestGetChunkData = ::std::option::Option<
    unsafe extern "C" fn(request: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
#[doc = " @brief Callback to read the size of the current request chunk during a chunked transfer\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP client during a chunked HTTP transfer, while reading\n the body of a POST or PUT request. The plugin must provide the\n size of the current chunk of data of the request body.\n\n @see OrthancPluginChunkedHttpClient()\n @param request The user payload, as provided by the calling plugin.\n @return The size of the current request chunk.\n @ingroup Toolbox"]
pub type OrthancPluginChunkedClientRequestGetChunkSize =
    ::std::option::Option<unsafe extern "C" fn(request: *mut ::std::os::raw::c_void) -> u32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginServerChunkedRequestReader_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that reads the content of a HTTP request body during a chunked HTTP transfer.\n @ingroup Callbacks"]
pub type OrthancPluginServerChunkedRequestReader = _OrthancPluginServerChunkedRequestReader_t;
#[doc = " @brief Callback to create a reader to handle incoming chunked HTTP transfers.\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP server that supports chunked HTTP transfers. This\n callback is only invoked if the HTTP method is POST or PUT. The\n callback must create an user-specific \"reader\" object that will\n be fed with the body of the incoming body.\n\n @see OrthancPluginRegisterChunkedRestCallback()\n @param reader Memory location that must be filled with the newly-created reader.\n @param url The URI that is accessed.\n @param request The body of the HTTP request. Note that \"body\" and \"bodySize\" are not used.\n @return 0 if success, or the error code if failure."]
pub type OrthancPluginServerChunkedRequestReaderFactory = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut *mut OrthancPluginServerChunkedRequestReader,
        url: *const ::std::os::raw::c_char,
        request: *const OrthancPluginHttpRequest,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback invoked whenever a new data chunk is available during a chunked transfer.\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP server that supports chunked HTTP transfers. This callback\n is invoked as soon as a new data chunk is available for the request body.\n\n @see OrthancPluginRegisterChunkedRestCallback()\n @param reader The user payload, as created by the OrthancPluginServerChunkedRequestReaderFactory() callback.\n @param data The content of the data chunk.\n @param size The size of the data chunk.\n @return 0 if success, or the error code if failure."]
pub type OrthancPluginServerChunkedRequestReaderAddChunk = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut OrthancPluginServerChunkedRequestReader,
        data: *const ::std::os::raw::c_void,
        size: u32,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback invoked whenever the request body is entirely received.\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP server that supports chunked HTTP transfers. This\n callback is invoked as soon as the full body of the HTTP request\n is available. The plugin can then send its answer thanks to the\n provided \"output\" object.\n\n @see OrthancPluginRegisterChunkedRestCallback()\n @param reader The user payload, as created by the OrthancPluginServerChunkedRequestReaderFactory() callback.\n @param output The HTTP connection to the client application.\n @return 0 if success, or the error code if failure."]
pub type OrthancPluginServerChunkedRequestReaderExecute = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut OrthancPluginServerChunkedRequestReader,
        output: *mut OrthancPluginRestOutput,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback invoked to release the resources associated with an incoming HTTP chunked transfer.\n\n Signature of a callback function that is called by Orthanc acting\n as a HTTP server that supports chunked HTTP transfers. This\n callback is invoked to release all the resources allocated by the\n given reader. Note that this function might be invoked even if\n the entire body was not read, to deal with client error or\n disconnection.\n\n @see OrthancPluginRegisterChunkedRestCallback()\n @param reader The user payload, as created by the OrthancPluginServerChunkedRequestReaderFactory() callback."]
pub type OrthancPluginServerChunkedRequestReaderFinalize = ::std::option::Option<
    unsafe extern "C" fn(reader: *mut OrthancPluginServerChunkedRequestReader),
>;
#[doc = " @brief Callback executed by the storage commitment SCP.\n\n Signature of a factory function that creates an object to handle\n one incoming storage commitment request.\n\n @remark The factory receives the list of the SOP class/instance\n UIDs of interest to the remote storage commitment SCU. This gives\n the factory the possibility to start some prefetch process\n upfront in the background, before the handler object is actually\n queried about the status of these DICOM instances.\n\n @param handler Output variable where the factory puts the handler object it created.\n @param jobId ID of the Orthanc job that is responsible for handling\n the storage commitment request. This job will successively look for the\n status of all the individual queried DICOM instances.\n @param transactionUid UID of the storage commitment transaction\n provided by the storage commitment SCU. It contains the value of the\n (0008,1195) DICOM tag.\n @param sopClassUids Array of the SOP class UIDs (0008,0016) that are queried by the SCU.\n @param sopInstanceUids Array of the SOP instance UIDs (0008,0018) that are queried by the SCU.\n @param countInstances Number of DICOM instances that are queried. This is the size\n of the `sopClassUids` and `sopInstanceUids` arrays.\n @param remoteAet The AET of the storage commitment SCU.\n @param calledAet The AET used by the SCU to contact the storage commitment SCP (i.e. Orthanc).\n @return 0 if success, other value if error.\n @ingroup DicomCallbacks"]
pub type OrthancPluginStorageCommitmentFactory = ::std::option::Option<
    unsafe extern "C" fn(
        handler: *mut *mut ::std::os::raw::c_void,
        jobId: *const ::std::os::raw::c_char,
        transactionUid: *const ::std::os::raw::c_char,
        sopClassUids: *const *const ::std::os::raw::c_char,
        sopInstanceUids: *const *const ::std::os::raw::c_char,
        countInstances: u32,
        remoteAet: *const ::std::os::raw::c_char,
        calledAet: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to free one storage commitment SCP handler.\n\n Signature of a callback function that releases the resources\n allocated by the factory of the storage commitment SCP. The\n handler is the return value of a previous call to the\n OrthancPluginStorageCommitmentFactory() callback.\n\n @param handler The handler object to be destructed.\n @ingroup DicomCallbacks"]
pub type OrthancPluginStorageCommitmentDestructor =
    ::std::option::Option<unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void)>;
#[doc = " @brief Callback to get the status of one DICOM instance in the\n storage commitment SCP.\n\n Signature of a callback function that is successively invoked for\n each DICOM instance that is queried by the remote storage\n commitment SCU.  The function must be tought of as a method of\n the handler object that was created by a previous call to the\n OrthancPluginStorageCommitmentFactory() callback. After each call\n to this method, the progress of the associated Orthanc job is\n updated.\n\n @param target Output variable where to put the status for the queried instance.\n @param handler The handler object associated with this storage commitment request.\n @param sopClassUid The SOP class UID (0008,0016) of interest.\n @param sopInstanceUid The SOP instance UID (0008,0018) of interest.\n @ingroup DicomCallbacks"]
pub type OrthancPluginStorageCommitmentLookup = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut OrthancPluginStorageCommitmentFailureReason,
        handler: *mut ::std::os::raw::c_void,
        sopClassUid: *const ::std::os::raw::c_char,
        sopInstanceUid: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to filter incoming DICOM instances received by Orthanc.\n\n Signature of a callback function that is triggered whenever\n Orthanc receives a new DICOM instance (e.g. through REST API or\n DICOM protocol), and that answers whether this DICOM instance\n should be accepted or discarded by Orthanc.\n\n Note that the metadata information is not available\n (i.e. GetInstanceMetadata() should not be used on \"instance\").\n\n @warning Your callback function will be called synchronously with\n the core of Orthanc. This implies that deadlocks might emerge if\n you call other core primitives of Orthanc in your callback (such\n deadlocks are particularly visible in the presence of other plugins\n or Lua scripts). It is thus strongly advised to avoid any call to\n the REST API of Orthanc in the callback. If you have to call\n other primitives of Orthanc, you should make these calls in a\n separate thread, passing the pending events to be processed\n through a message queue.\n\n @param instance The received DICOM instance.\n @return 0 to discard the instance, 1 to store the instance, -1 if error.\n @ingroup Callbacks"]
pub type OrthancPluginIncomingDicomInstanceFilter =
    ::std::option::Option<unsafe extern "C" fn(instance: *const OrthancPluginDicomInstance) -> i32>;
#[doc = " @brief Callback to filter incoming DICOM instances received by\n Orthanc through C-STORE.\n\n Signature of a callback function that is triggered whenever\n Orthanc receives a new DICOM instance using DICOM C-STORE, and\n that answers whether this DICOM instance should be accepted or\n discarded by Orthanc. If the instance is discarded, the callback\n can specify the DIMSE error code answered by the Orthanc C-STORE\n SCP.\n\n Note that the metadata information is not available\n (i.e. GetInstanceMetadata() should not be used on \"instance\").\n\n @warning Your callback function will be called synchronously with\n the core of Orthanc. This implies that deadlocks might emerge if\n you call other core primitives of Orthanc in your callback (such\n deadlocks are particularly visible in the presence of other plugins\n or Lua scripts). It is thus strongly advised to avoid any call to\n the REST API of Orthanc in the callback. If you have to call\n other primitives of Orthanc, you should make these calls in a\n separate thread, passing the pending events to be processed\n through a message queue.\n\n @param dimseStatus If the DICOM instance is discarded,\n DIMSE status to be sent by the C-STORE SCP of Orthanc\n @param instance The received DICOM instance.\n @return 0 to discard the instance, 1 to store the instance, -1 if error.\n @ingroup Callbacks"]
pub type OrthancPluginIncomingCStoreInstanceFilter = ::std::option::Option<
    unsafe extern "C" fn(dimseStatus: *mut u16, instance: *const OrthancPluginDicomInstance) -> i32,
>;
#[doc = " @brief Callback to keep/discard/modify a DICOM instance received\n by Orthanc from any source (C-STORE or REST API)\n\n Signature of a callback function that is triggered whenever\n Orthanc receives a new DICOM instance (through DICOM protocol or\n REST API), and that specifies an action to be applied to this\n newly received instance. The instance can be kept as it is, can\n be modified by the plugin, or can be discarded.\n\n This callback is invoked immediately after reception, i.e. before\n transcoding and before filtering\n (cf. OrthancPluginRegisterIncomingDicomInstanceFilter()).\n\n @warning Your callback function will be called synchronously with\n the core of Orthanc. This implies that deadlocks might emerge if\n you call other core primitives of Orthanc in your callback (such\n deadlocks are particularly visible in the presence of other plugins\n or Lua scripts). It is thus strongly advised to avoid any call to\n the REST API of Orthanc in the callback. If you have to call\n other primitives of Orthanc, you should make these calls in a\n separate thread, passing the pending events to be processed\n through a message queue.\n\n @param modifiedDicomBuffer A buffer containing the modified DICOM (output).\n This buffer must be allocated using OrthancPluginCreateMemoryBuffer64()\n and will be freed by the Orthanc core.\n @param receivedDicomBuffer A buffer containing the received DICOM (input).\n @param receivedDicomBufferSize The size of the received DICOM (input).\n @param origin The origin of the DICOM instance (input).\n @return `OrthancPluginReceivedInstanceAction_KeepAsIs` to accept the instance as is,<br/>\n         `OrthancPluginReceivedInstanceAction_Modify` to store the modified DICOM contained in `modifiedDicomBuffer`,<br/>\n         `OrthancPluginReceivedInstanceAction_Discard` to tell Orthanc to discard the instance.\n @ingroup Callbacks"]
pub type OrthancPluginReceivedInstanceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        modifiedDicomBuffer: *mut OrthancPluginMemoryBuffer64,
        receivedDicomBuffer: *const ::std::os::raw::c_void,
        receivedDicomBufferSize: u64,
        origin: OrthancPluginInstanceOrigin,
    ) -> OrthancPluginReceivedInstanceAction,
>;
#[doc = " @brief Signature of a callback function to transcode a DICOM instance.\n @param transcoded Target memory buffer. It must be allocated by the\n plugin using OrthancPluginCreateMemoryBuffer().\n @param buffer Memory buffer containing the source DICOM instance.\n @param size Size of the source memory buffer.\n @param allowedSyntaxes A C array of possible transfer syntaxes UIDs for the\n result of the transcoding. The plugin must choose by itself the\n transfer syntax that will be used for the resulting DICOM image.\n @param countSyntaxes The number of transfer syntaxes that are contained\n in the \"allowedSyntaxes\" array.\n @param allowNewSopInstanceUid Whether the transcoding plugin can select\n a transfer syntax that will change the SOP instance UID (or, in other\n terms, whether the plugin can transcode using lossy compression).\n @return 0 if success (i.e. image successfully transcoded and stored into\n \"transcoded\"), or the error code if failure.\n @ingroup Callbacks"]
pub type OrthancPluginTranscoderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        transcoded: *mut OrthancPluginMemoryBuffer,
        buffer: *const ::std::os::raw::c_void,
        size: u64,
        allowedSyntaxes: *const *const ::std::os::raw::c_char,
        countSyntaxes: u32,
        allowNewSopInstanceUid: u8,
    ) -> OrthancPluginErrorCode,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OrthancPluginWebDavCollection_t {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque structure that represents a WebDAV collection.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavCollection = _OrthancPluginWebDavCollection_t;
#[doc = " @brief Declare a file while returning the content of a folder.\n\n This function declares a file while returning the content of a\n WebDAV folder.\n\n @param collection Context of the collection.\n @param name Base name of the file.\n @param dateTime The date and time of creation of the file.\n Check out the documentation of OrthancPluginWebDavRetrieveFile() for more information.\n @param size Size of the file.\n @param mimeType The MIME type of the file. If empty or set to `NULL`,\n Orthanc will do a best guess depending on the file extension.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavAddFile = ::std::option::Option<
    unsafe extern "C" fn(
        collection: *mut OrthancPluginWebDavCollection,
        name: *const ::std::os::raw::c_char,
        size: u64,
        mimeType: *const ::std::os::raw::c_char,
        dateTime: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Declare a subfolder while returning the content of a folder.\n\n This function declares a subfolder while returning the content of a\n WebDAV folder.\n\n @param collection Context of the collection.\n @param name Base name of the subfolder.\n @param dateTime The date and time of creation of the subfolder.\n Check out the documentation of OrthancPluginWebDavRetrieveFile() for more information.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavAddFolder = ::std::option::Option<
    unsafe extern "C" fn(
        collection: *mut OrthancPluginWebDavCollection,
        name: *const ::std::os::raw::c_char,
        dateTime: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Retrieve the content of a file.\n\n This function is used to forward the content of a file from a\n WebDAV collection, to the core of Orthanc.\n\n @param collection Context of the collection.\n @param data Content of the file.\n @param size Size of the file.\n @param mimeType The MIME type of the file. If empty or set to `NULL`,\n Orthanc will do a best guess depending on the file extension.\n @param dateTime The date and time of creation of the file.\n It must be formatted as an ISO string of form\n `YYYYMMDDTHHMMSS,fffffffff` where T is the date-time\n separator. It must be expressed in UTC (it is the responsibility\n of the plugin to do the possible timezone\n conversions). Internally, this string will be parsed using\n `boost::posix_time::from_iso_string()`.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavRetrieveFile = ::std::option::Option<
    unsafe extern "C" fn(
        collection: *mut OrthancPluginWebDavCollection,
        data: *const ::std::os::raw::c_void,
        size: u64,
        mimeType: *const ::std::os::raw::c_char,
        dateTime: *const ::std::os::raw::c_char,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for testing the existence of a folder.\n\n Signature of a callback function that tests whether the given\n path in the WebDAV collection exists and corresponds to a folder.\n\n @param isExisting Pointer to a Boolean that must be set to `1` if the folder exists, or `0` otherwise.\n @param pathSize Number of levels in the path.\n @param pathItems Items making the path.\n @param payload The user payload.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavIsExistingFolderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isExisting: *mut u8,
        pathSize: u32,
        pathItems: *const *const ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_void,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for listing the content of a folder.\n\n Signature of a callback function that lists the content of a\n folder in the WebDAV collection. The callback must call the\n provided `addFile()` and `addFolder()` functions to emit the\n content of the folder.\n\n @param isExisting Pointer to a Boolean that must be set to `1` if the folder exists, or `0` otherwise.\n @param collection Context to be provided to `addFile()` and `addFolder()` functions.\n @param addFile Function to add a file to the list.\n @param addFolder Function to add a folder to the list.\n @param pathSize Number of levels in the path.\n @param pathItems Items making the path.\n @param payload The user payload.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavListFolderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isExisting: *mut u8,
        collection: *mut OrthancPluginWebDavCollection,
        addFile: OrthancPluginWebDavAddFile,
        addFolder: OrthancPluginWebDavAddFolder,
        pathSize: u32,
        pathItems: *const *const ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_void,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback for retrieving the content of a file.\n\n Signature of a callback function that retrieves the content of a\n file in the WebDAV collection. The callback must call the\n provided `retrieveFile()` function to emit the actual content of\n the file.\n\n @param collection Context to be provided to `retrieveFile()` function.\n @param retrieveFile Function to return the content of the file.\n @param pathSize Number of levels in the path.\n @param pathItems Items making the path.\n @param payload The user payload.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavRetrieveFileCallback = ::std::option::Option<
    unsafe extern "C" fn(
        collection: *mut OrthancPluginWebDavCollection,
        retrieveFile: OrthancPluginWebDavRetrieveFile,
        pathSize: u32,
        pathItems: *const *const ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_void,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to store a file.\n\n Signature of a callback function that stores a file into the\n WebDAV collection.\n\n @param isReadOnly Pointer to a Boolean that must be set to `1` if the collection is read-only, or `0` otherwise.\n @param pathSize Number of levels in the path.\n @param pathItems Items making the path.\n @param data Content of the file to be stored.\n @param size Size of the file to be stored.\n @param payload The user payload.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavStoreFileCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isReadOnly: *mut u8,
        pathSize: u32,
        pathItems: *const *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        size: u64,
        payload: *mut ::std::os::raw::c_void,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to create a folder.\n\n Signature of a callback function that creates a folder in the\n WebDAV collection.\n\n @param isReadOnly Pointer to a Boolean that must be set to `1` if the collection is read-only, or `0` otherwise.\n @param pathSize Number of levels in the path.\n @param pathItems Items making the path.\n @param payload The user payload.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavCreateFolderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isReadOnly: *mut u8,
        pathSize: u32,
        pathItems: *const *const ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_void,
    ) -> OrthancPluginErrorCode,
>;
#[doc = " @brief Callback to remove a file or a folder.\n\n Signature of a callback function that removes a file or a folder\n from the WebDAV collection.\n\n @param isReadOnly Pointer to a Boolean that must be set to `1` if the collection is read-only, or `0` otherwise.\n @param pathSize Number of levels in the path.\n @param pathItems Items making the path.\n @param payload The user payload.\n @return 0 if success, other value if error.\n @ingroup Callbacks"]
pub type OrthancPluginWebDavDeleteItemCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isReadOnly: *mut u8,
        pathSize: u32,
        pathItems: *const *const ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_void,
    ) -> OrthancPluginErrorCode,
>;
